// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: x3ware.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "x3ware.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace x3ware {

void protobuf_ShutdownFile_x3ware_2eproto() {
  delete ModuleInfo::default_instance_;
  delete Table::default_instance_;
  delete Feature::default_instance_;
  delete Record::default_instance_;
  delete ListRecord::default_instance_;
  delete SearchParam::default_instance_;
  delete MatchResult::default_instance_;
  delete SearchResult::default_instance_;
  delete CompareParam::default_instance_;
  delete CompareResult::default_instance_;
  delete ModelVerCheck::default_instance_;
  delete WareMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_x3ware_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_x3ware_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_x3ware_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ModuleInfo::default_instance_ = new ModuleInfo();
  Table::default_instance_ = new Table();
  Feature::default_instance_ = new Feature();
  Record::default_instance_ = new Record();
  ListRecord::default_instance_ = new ListRecord();
  SearchParam::default_instance_ = new SearchParam();
  MatchResult::default_instance_ = new MatchResult();
  SearchResult::default_instance_ = new SearchResult();
  CompareParam::default_instance_ = new CompareParam();
  CompareResult::default_instance_ = new CompareResult();
  ModelVerCheck::default_instance_ = new ModelVerCheck();
  WareMessage::default_instance_ = new WareMessage();
  ModuleInfo::default_instance_->InitAsDefaultInstance();
  Table::default_instance_->InitAsDefaultInstance();
  Feature::default_instance_->InitAsDefaultInstance();
  Record::default_instance_->InitAsDefaultInstance();
  ListRecord::default_instance_->InitAsDefaultInstance();
  SearchParam::default_instance_->InitAsDefaultInstance();
  MatchResult::default_instance_->InitAsDefaultInstance();
  SearchResult::default_instance_->InitAsDefaultInstance();
  CompareParam::default_instance_->InitAsDefaultInstance();
  CompareResult::default_instance_->InitAsDefaultInstance();
  ModelVerCheck::default_instance_->InitAsDefaultInstance();
  WareMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_x3ware_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_x3ware_2eproto_once_);
void protobuf_AddDesc_x3ware_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_x3ware_2eproto_once_,
                 &protobuf_AddDesc_x3ware_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_x3ware_2eproto {
  StaticDescriptorInitializer_x3ware_2eproto() {
    protobuf_AddDesc_x3ware_2eproto();
  }
} static_descriptor_initializer_x3ware_2eproto_;
#endif

// ===================================================================

bool ModuleInfo_StoreType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ModuleInfo_StoreType ModuleInfo::FILE;
const ModuleInfo_StoreType ModuleInfo::SQLITE;
const ModuleInfo_StoreType ModuleInfo::MONGODB;
const ModuleInfo_StoreType ModuleInfo::MEMORY;
const ModuleInfo_StoreType ModuleInfo::StoreType_MIN;
const ModuleInfo_StoreType ModuleInfo::StoreType_MAX;
const int ModuleInfo::StoreType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModuleInfo::kStoreTypeFieldNumber;
const int ModuleInfo::kDbDirFieldNumber;
const int ModuleInfo::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModuleInfo::ModuleInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:x3ware.ModuleInfo)
}

void ModuleInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ModuleInfo::ModuleInfo(const ModuleInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:x3ware.ModuleInfo)
}

void ModuleInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  store_type__ = 0;
  db_dir__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ModuleInfo::~ModuleInfo() {
  // @@protoc_insertion_point(destructor:x3ware.ModuleInfo)
  SharedDtor();
}

void ModuleInfo::SharedDtor() {
  db_dir__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ModuleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModuleInfo& ModuleInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_x3ware_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_x3ware_2eproto();
#endif
  return *default_instance_;
}

ModuleInfo* ModuleInfo::default_instance_ = NULL;

ModuleInfo* ModuleInfo::New(::google::protobuf::Arena* arena) const {
  ModuleInfo* n = new ModuleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModuleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:x3ware.ModuleInfo)
  store_type__ = 0;
  db_dir__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ModuleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:x3ware.ModuleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .x3ware.ModuleInfo.StoreType store_type_ = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_store_type_(static_cast< ::x3ware::ModuleInfo_StoreType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db_dir_;
        break;
      }

      // optional string db_dir_ = 2;
      case 2: {
        if (tag == 18) {
         parse_db_dir_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_dir_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_dir_().data(), this->db_dir_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "x3ware.ModuleInfo.db_dir_"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version_;
        break;
      }

      // optional string version_ = 3;
      case 3: {
        if (tag == 26) {
         parse_version_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version_().data(), this->version_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "x3ware.ModuleInfo.version_"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:x3ware.ModuleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:x3ware.ModuleInfo)
  return false;
#undef DO_
}

void ModuleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:x3ware.ModuleInfo)
  // optional .x3ware.ModuleInfo.StoreType store_type_ = 1;
  if (this->store_type_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->store_type_(), output);
  }

  // optional string db_dir_ = 2;
  if (this->db_dir_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_dir_().data(), this->db_dir_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "x3ware.ModuleInfo.db_dir_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_dir_(), output);
  }

  // optional string version_ = 3;
  if (this->version_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version_().data(), this->version_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "x3ware.ModuleInfo.version_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version_(), output);
  }

  // @@protoc_insertion_point(serialize_end:x3ware.ModuleInfo)
}

int ModuleInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:x3ware.ModuleInfo)
  int total_size = 0;

  // optional .x3ware.ModuleInfo.StoreType store_type_ = 1;
  if (this->store_type_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->store_type_());
  }

  // optional string db_dir_ = 2;
  if (this->db_dir_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_dir_());
  }

  // optional string version_ = 3;
  if (this->version_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version_());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModuleInfo*>(&from));
}

void ModuleInfo::MergeFrom(const ModuleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:x3ware.ModuleInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.store_type_() != 0) {
    set_store_type_(from.store_type_());
  }
  if (from.db_dir_().size() > 0) {

    db_dir__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_dir__);
  }
  if (from.version_().size() > 0) {

    version__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version__);
  }
}

void ModuleInfo::CopyFrom(const ModuleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:x3ware.ModuleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleInfo::IsInitialized() const {

  return true;
}

void ModuleInfo::Swap(ModuleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModuleInfo::InternalSwap(ModuleInfo* other) {
  std::swap(store_type__, other->store_type__);
  db_dir__.Swap(&other->db_dir__);
  version__.Swap(&other->version__);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ModuleInfo::GetTypeName() const {
  return "x3ware.ModuleInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModuleInfo

// optional .x3ware.ModuleInfo.StoreType store_type_ = 1;
void ModuleInfo::clear_store_type_() {
  store_type__ = 0;
}
 ::x3ware::ModuleInfo_StoreType ModuleInfo::store_type_() const {
  // @@protoc_insertion_point(field_get:x3ware.ModuleInfo.store_type_)
  return static_cast< ::x3ware::ModuleInfo_StoreType >(store_type__);
}
 void ModuleInfo::set_store_type_(::x3ware::ModuleInfo_StoreType value) {
  
  store_type__ = value;
  // @@protoc_insertion_point(field_set:x3ware.ModuleInfo.store_type_)
}

// optional string db_dir_ = 2;
void ModuleInfo::clear_db_dir_() {
  db_dir__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ModuleInfo::db_dir_() const {
  // @@protoc_insertion_point(field_get:x3ware.ModuleInfo.db_dir_)
  return db_dir__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModuleInfo::set_db_dir_(const ::std::string& value) {
  
  db_dir__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.ModuleInfo.db_dir_)
}
 void ModuleInfo::set_db_dir_(const char* value) {
  
  db_dir__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.ModuleInfo.db_dir_)
}
 void ModuleInfo::set_db_dir_(const char* value, size_t size) {
  
  db_dir__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.ModuleInfo.db_dir_)
}
 ::std::string* ModuleInfo::mutable_db_dir_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.ModuleInfo.db_dir_)
  return db_dir__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModuleInfo::release_db_dir_() {
  // @@protoc_insertion_point(field_release:x3ware.ModuleInfo.db_dir_)
  
  return db_dir__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModuleInfo::set_allocated_db_dir_(::std::string* db_dir_) {
  if (db_dir_ != NULL) {
    
  } else {
    
  }
  db_dir__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_dir_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.ModuleInfo.db_dir_)
}

// optional string version_ = 3;
void ModuleInfo::clear_version_() {
  version__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ModuleInfo::version_() const {
  // @@protoc_insertion_point(field_get:x3ware.ModuleInfo.version_)
  return version__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModuleInfo::set_version_(const ::std::string& value) {
  
  version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.ModuleInfo.version_)
}
 void ModuleInfo::set_version_(const char* value) {
  
  version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.ModuleInfo.version_)
}
 void ModuleInfo::set_version_(const char* value, size_t size) {
  
  version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.ModuleInfo.version_)
}
 ::std::string* ModuleInfo::mutable_version_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.ModuleInfo.version_)
  return version__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModuleInfo::release_version_() {
  // @@protoc_insertion_point(field_release:x3ware.ModuleInfo.version_)
  
  return version__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModuleInfo::set_allocated_version_(::std::string* version_) {
  if (version_ != NULL) {
    
  } else {
    
  }
  version__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.ModuleInfo.version_)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kNameFieldNumber;
const int Table::kModelVersionFieldNumber;
const int Table::kAttrCheckFieldNumber;
const int Table::kFeatureSizeFieldNumber;
const int Table::kDistanceThrFieldNumber;
const int Table::kSimilarThrFieldNumber;
const int Table::kDbDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:x3ware.Table)
}

void Table::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Table::Table(const Table& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:x3ware.Table)
}

void Table::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_version__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attr_check__ = 0;
  feature_size__ = 0;
  distance_thr__ = 0;
  similar_thr__ = 0;
  db_dir__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:x3ware.Table)
  SharedDtor();
}

void Table::SharedDtor() {
  name__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_version__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_dir__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Table& Table::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_x3ware_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_x3ware_2eproto();
#endif
  return *default_instance_;
}

Table* Table::default_instance_ = NULL;

Table* Table::New(::google::protobuf::Arena* arena) const {
  Table* n = new Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:x3ware.Table)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Table, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Table*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(attr_check__, similar_thr__);
  name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_version__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_dir__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:x3ware.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name_ = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name_().data(), this->name_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "x3ware.Table.name_"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model_version_;
        break;
      }

      // optional string model_version_ = 2;
      case 2: {
        if (tag == 18) {
         parse_model_version_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_version_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_version_().data(), this->model_version_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "x3ware.Table.model_version_"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attr_check_;
        break;
      }

      // optional int32 attr_check_ = 3;
      case 3: {
        if (tag == 24) {
         parse_attr_check_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_check__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_feature_size_;
        break;
      }

      // optional int32 feature_size_ = 4;
      case 4: {
        if (tag == 32) {
         parse_feature_size_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_size__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_distance_thr_;
        break;
      }

      // optional float distance_thr_ = 5;
      case 5: {
        if (tag == 45) {
         parse_distance_thr_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_thr__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_similar_thr_;
        break;
      }

      // optional float similar_thr_ = 6;
      case 6: {
        if (tag == 53) {
         parse_similar_thr_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &similar_thr__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_db_dir_;
        break;
      }

      // optional string db_dir_ = 7;
      case 7: {
        if (tag == 58) {
         parse_db_dir_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_dir_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_dir_().data(), this->db_dir_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "x3ware.Table.db_dir_"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:x3ware.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:x3ware.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:x3ware.Table)
  // optional string name_ = 1;
  if (this->name_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name_().data(), this->name_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "x3ware.Table.name_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name_(), output);
  }

  // optional string model_version_ = 2;
  if (this->model_version_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_version_().data(), this->model_version_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "x3ware.Table.model_version_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_version_(), output);
  }

  // optional int32 attr_check_ = 3;
  if (this->attr_check_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attr_check_(), output);
  }

  // optional int32 feature_size_ = 4;
  if (this->feature_size_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->feature_size_(), output);
  }

  // optional float distance_thr_ = 5;
  if (this->distance_thr_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->distance_thr_(), output);
  }

  // optional float similar_thr_ = 6;
  if (this->similar_thr_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->similar_thr_(), output);
  }

  // optional string db_dir_ = 7;
  if (this->db_dir_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_dir_().data(), this->db_dir_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "x3ware.Table.db_dir_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->db_dir_(), output);
  }

  // @@protoc_insertion_point(serialize_end:x3ware.Table)
}

int Table::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:x3ware.Table)
  int total_size = 0;

  // optional string name_ = 1;
  if (this->name_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name_());
  }

  // optional string model_version_ = 2;
  if (this->model_version_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_version_());
  }

  // optional int32 attr_check_ = 3;
  if (this->attr_check_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attr_check_());
  }

  // optional int32 feature_size_ = 4;
  if (this->feature_size_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature_size_());
  }

  // optional float distance_thr_ = 5;
  if (this->distance_thr_() != 0) {
    total_size += 1 + 4;
  }

  // optional float similar_thr_ = 6;
  if (this->similar_thr_() != 0) {
    total_size += 1 + 4;
  }

  // optional string db_dir_ = 7;
  if (this->db_dir_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_dir_());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Table*>(&from));
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:x3ware.Table)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name_().size() > 0) {

    name__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name__);
  }
  if (from.model_version_().size() > 0) {

    model_version__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_version__);
  }
  if (from.attr_check_() != 0) {
    set_attr_check_(from.attr_check_());
  }
  if (from.feature_size_() != 0) {
    set_feature_size_(from.feature_size_());
  }
  if (from.distance_thr_() != 0) {
    set_distance_thr_(from.distance_thr_());
  }
  if (from.similar_thr_() != 0) {
    set_similar_thr_(from.similar_thr_());
  }
  if (from.db_dir_().size() > 0) {

    db_dir__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_dir__);
  }
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:x3ware.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {

  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  name__.Swap(&other->name__);
  model_version__.Swap(&other->model_version__);
  std::swap(attr_check__, other->attr_check__);
  std::swap(feature_size__, other->feature_size__);
  std::swap(distance_thr__, other->distance_thr__);
  std::swap(similar_thr__, other->similar_thr__);
  db_dir__.Swap(&other->db_dir__);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Table::GetTypeName() const {
  return "x3ware.Table";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Table

// optional string name_ = 1;
void Table::clear_name_() {
  name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Table::name_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.name_)
  return name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table::set_name_(const ::std::string& value) {
  
  name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.Table.name_)
}
 void Table::set_name_(const char* value) {
  
  name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.Table.name_)
}
 void Table::set_name_(const char* value, size_t size) {
  
  name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.Table.name_)
}
 ::std::string* Table::mutable_name_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.Table.name_)
  return name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Table::release_name_() {
  // @@protoc_insertion_point(field_release:x3ware.Table.name_)
  
  return name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table::set_allocated_name_(::std::string* name_) {
  if (name_ != NULL) {
    
  } else {
    
  }
  name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.Table.name_)
}

// optional string model_version_ = 2;
void Table::clear_model_version_() {
  model_version__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Table::model_version_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.model_version_)
  return model_version__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table::set_model_version_(const ::std::string& value) {
  
  model_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.Table.model_version_)
}
 void Table::set_model_version_(const char* value) {
  
  model_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.Table.model_version_)
}
 void Table::set_model_version_(const char* value, size_t size) {
  
  model_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.Table.model_version_)
}
 ::std::string* Table::mutable_model_version_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.Table.model_version_)
  return model_version__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Table::release_model_version_() {
  // @@protoc_insertion_point(field_release:x3ware.Table.model_version_)
  
  return model_version__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table::set_allocated_model_version_(::std::string* model_version_) {
  if (model_version_ != NULL) {
    
  } else {
    
  }
  model_version__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_version_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.Table.model_version_)
}

// optional int32 attr_check_ = 3;
void Table::clear_attr_check_() {
  attr_check__ = 0;
}
 ::google::protobuf::int32 Table::attr_check_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.attr_check_)
  return attr_check__;
}
 void Table::set_attr_check_(::google::protobuf::int32 value) {
  
  attr_check__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Table.attr_check_)
}

// optional int32 feature_size_ = 4;
void Table::clear_feature_size_() {
  feature_size__ = 0;
}
 ::google::protobuf::int32 Table::feature_size_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.feature_size_)
  return feature_size__;
}
 void Table::set_feature_size_(::google::protobuf::int32 value) {
  
  feature_size__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Table.feature_size_)
}

// optional float distance_thr_ = 5;
void Table::clear_distance_thr_() {
  distance_thr__ = 0;
}
 float Table::distance_thr_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.distance_thr_)
  return distance_thr__;
}
 void Table::set_distance_thr_(float value) {
  
  distance_thr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Table.distance_thr_)
}

// optional float similar_thr_ = 6;
void Table::clear_similar_thr_() {
  similar_thr__ = 0;
}
 float Table::similar_thr_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.similar_thr_)
  return similar_thr__;
}
 void Table::set_similar_thr_(float value) {
  
  similar_thr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Table.similar_thr_)
}

// optional string db_dir_ = 7;
void Table::clear_db_dir_() {
  db_dir__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Table::db_dir_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.db_dir_)
  return db_dir__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table::set_db_dir_(const ::std::string& value) {
  
  db_dir__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.Table.db_dir_)
}
 void Table::set_db_dir_(const char* value) {
  
  db_dir__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.Table.db_dir_)
}
 void Table::set_db_dir_(const char* value, size_t size) {
  
  db_dir__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.Table.db_dir_)
}
 ::std::string* Table::mutable_db_dir_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.Table.db_dir_)
  return db_dir__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Table::release_db_dir_() {
  // @@protoc_insertion_point(field_release:x3ware.Table.db_dir_)
  
  return db_dir__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table::set_allocated_db_dir_(::std::string* db_dir_) {
  if (db_dir_ != NULL) {
    
  } else {
    
  }
  db_dir__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_dir_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.Table.db_dir_)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feature::kUriFieldNumber;
const int Feature::kAttrFieldNumber;
const int Feature::kSizeFieldNumber;
const int Feature::kFeatureFFieldNumber;
const int Feature::kFeatureIFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feature::Feature()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:x3ware.Feature)
}

void Feature::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Feature::Feature(const Feature& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:x3ware.Feature)
}

void Feature::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attr__ = 0;
  size__ = 0;
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:x3ware.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  uri__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Feature& Feature::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_x3ware_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_x3ware_2eproto();
#endif
  return *default_instance_;
}

Feature* Feature::default_instance_ = NULL;

Feature* Feature::New(::google::protobuf::Arena* arena) const {
  Feature* n = new Feature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:x3ware.Feature)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Feature, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Feature*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(attr__, size__);
  uri__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  feature_f__.Clear();
  feature_i__.Clear();
}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:x3ware.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri_ = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri_().data(), this->uri_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "x3ware.Feature.uri_"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attr_;
        break;
      }

      // optional int32 attr_ = 2;
      case 2: {
        if (tag == 16) {
         parse_attr_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size_;
        break;
      }

      // optional int32 size_ = 3;
      case 3: {
        if (tag == 24) {
         parse_size_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_feature_f_;
        break;
      }

      // repeated float feature_f_ = 4;
      case 4: {
        if (tag == 34) {
         parse_feature_f_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_feature_f_())));
        } else if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_feature_f_())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_feature_i_;
        break;
      }

      // repeated int32 feature_i_ = 5;
      case 5: {
        if (tag == 42) {
         parse_feature_i_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_feature_i_())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_feature_i_())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:x3ware.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:x3ware.Feature)
  return false;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:x3ware.Feature)
  // optional string uri_ = 1;
  if (this->uri_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri_().data(), this->uri_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "x3ware.Feature.uri_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri_(), output);
  }

  // optional int32 attr_ = 2;
  if (this->attr_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attr_(), output);
  }

  // optional int32 size_ = 3;
  if (this->size_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size_(), output);
  }

  // repeated float feature_f_ = 4;
  if (this->feature_f__size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_feature_f__cached_byte_size_);
  }
  for (int i = 0; i < this->feature_f__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->feature_f_(i), output);
  }

  // repeated int32 feature_i_ = 5;
  if (this->feature_i__size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_feature_i__cached_byte_size_);
  }
  for (int i = 0; i < this->feature_i__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->feature_i_(i), output);
  }

  // @@protoc_insertion_point(serialize_end:x3ware.Feature)
}

int Feature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:x3ware.Feature)
  int total_size = 0;

  // optional string uri_ = 1;
  if (this->uri_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri_());
  }

  // optional int32 attr_ = 2;
  if (this->attr_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->attr_());
  }

  // optional int32 size_ = 3;
  if (this->size_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size_());
  }

  // repeated float feature_f_ = 4;
  {
    int data_size = 0;
    data_size = 4 * this->feature_f__size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _feature_f__cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 feature_i_ = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->feature_i__size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->feature_i_(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _feature_i__cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Feature*>(&from));
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:x3ware.Feature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  feature_f__.MergeFrom(from.feature_f__);
  feature_i__.MergeFrom(from.feature_i__);
  if (from.uri_().size() > 0) {

    uri__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri__);
  }
  if (from.attr_() != 0) {
    set_attr_(from.attr_());
  }
  if (from.size_() != 0) {
    set_size_(from.size_());
  }
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:x3ware.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {

  return true;
}

void Feature::Swap(Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feature::InternalSwap(Feature* other) {
  uri__.Swap(&other->uri__);
  std::swap(attr__, other->attr__);
  std::swap(size__, other->size__);
  feature_f__.UnsafeArenaSwap(&other->feature_f__);
  feature_i__.UnsafeArenaSwap(&other->feature_i__);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Feature::GetTypeName() const {
  return "x3ware.Feature";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feature

// optional string uri_ = 1;
void Feature::clear_uri_() {
  uri__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::uri_() const {
  // @@protoc_insertion_point(field_get:x3ware.Feature.uri_)
  return uri__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_uri_(const ::std::string& value) {
  
  uri__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.Feature.uri_)
}
 void Feature::set_uri_(const char* value) {
  
  uri__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.Feature.uri_)
}
 void Feature::set_uri_(const char* value, size_t size) {
  
  uri__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.Feature.uri_)
}
 ::std::string* Feature::mutable_uri_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.Feature.uri_)
  return uri__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_uri_() {
  // @@protoc_insertion_point(field_release:x3ware.Feature.uri_)
  
  return uri__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_uri_(::std::string* uri_) {
  if (uri_ != NULL) {
    
  } else {
    
  }
  uri__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.Feature.uri_)
}

// optional int32 attr_ = 2;
void Feature::clear_attr_() {
  attr__ = 0;
}
 ::google::protobuf::int32 Feature::attr_() const {
  // @@protoc_insertion_point(field_get:x3ware.Feature.attr_)
  return attr__;
}
 void Feature::set_attr_(::google::protobuf::int32 value) {
  
  attr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Feature.attr_)
}

// optional int32 size_ = 3;
void Feature::clear_size_() {
  size__ = 0;
}
 ::google::protobuf::int32 Feature::size_() const {
  // @@protoc_insertion_point(field_get:x3ware.Feature.size_)
  return size__;
}
 void Feature::set_size_(::google::protobuf::int32 value) {
  
  size__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Feature.size_)
}

// repeated float feature_f_ = 4;
int Feature::feature_f__size() const {
  return feature_f__.size();
}
void Feature::clear_feature_f_() {
  feature_f__.Clear();
}
 float Feature::feature_f_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.Feature.feature_f_)
  return feature_f__.Get(index);
}
 void Feature::set_feature_f_(int index, float value) {
  feature_f__.Set(index, value);
  // @@protoc_insertion_point(field_set:x3ware.Feature.feature_f_)
}
 void Feature::add_feature_f_(float value) {
  feature_f__.Add(value);
  // @@protoc_insertion_point(field_add:x3ware.Feature.feature_f_)
}
 const ::google::protobuf::RepeatedField< float >&
Feature::feature_f_() const {
  // @@protoc_insertion_point(field_list:x3ware.Feature.feature_f_)
  return feature_f__;
}
 ::google::protobuf::RepeatedField< float >*
Feature::mutable_feature_f_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.Feature.feature_f_)
  return &feature_f__;
}

// repeated int32 feature_i_ = 5;
int Feature::feature_i__size() const {
  return feature_i__.size();
}
void Feature::clear_feature_i_() {
  feature_i__.Clear();
}
 ::google::protobuf::int32 Feature::feature_i_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.Feature.feature_i_)
  return feature_i__.Get(index);
}
 void Feature::set_feature_i_(int index, ::google::protobuf::int32 value) {
  feature_i__.Set(index, value);
  // @@protoc_insertion_point(field_set:x3ware.Feature.feature_i_)
}
 void Feature::add_feature_i_(::google::protobuf::int32 value) {
  feature_i__.Add(value);
  // @@protoc_insertion_point(field_add:x3ware.Feature.feature_i_)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Feature::feature_i_() const {
  // @@protoc_insertion_point(field_list:x3ware.Feature.feature_i_)
  return feature_i__;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Feature::mutable_feature_i_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.Feature.feature_i_)
  return &feature_i__;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Record::kIdFieldNumber;
const int Record::kNumFieldNumber;
const int Record::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Record::Record()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:x3ware.Record)
}

void Record::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Record::Record(const Record& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:x3ware.Record)
}

void Record::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num__ = 0;
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:x3ware.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  id__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Record& Record::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_x3ware_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_x3ware_2eproto();
#endif
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New(::google::protobuf::Arena* arena) const {
  Record* n = new Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:x3ware.Record)
  id__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num__ = 0;
  features__.Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:x3ware.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id_ = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id_().data(), this->id_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "x3ware.Record.id_"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_;
        break;
      }

      // optional int32 num_ = 2;
      case 2: {
        if (tag == 16) {
         parse_num_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_features_;
        break;
      }

      // repeated .x3ware.Feature features_ = 3;
      case 3: {
        if (tag == 26) {
         parse_features_:
          DO_(input->IncrementRecursionDepth());
         parse_loop_features_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_features_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_features_;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:x3ware.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:x3ware.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:x3ware.Record)
  // optional string id_ = 1;
  if (this->id_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id_().data(), this->id_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "x3ware.Record.id_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id_(), output);
  }

  // optional int32 num_ = 2;
  if (this->num_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_(), output);
  }

  // repeated .x3ware.Feature features_ = 3;
  for (unsigned int i = 0, n = this->features__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->features_(i), output);
  }

  // @@protoc_insertion_point(serialize_end:x3ware.Record)
}

int Record::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:x3ware.Record)
  int total_size = 0;

  // optional string id_ = 1;
  if (this->id_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id_());
  }

  // optional int32 num_ = 2;
  if (this->num_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_());
  }

  // repeated .x3ware.Feature features_ = 3;
  total_size += 1 * this->features__size();
  for (int i = 0; i < this->features__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->features_(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Record*>(&from));
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:x3ware.Record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  features__.MergeFrom(from.features__);
  if (from.id_().size() > 0) {

    id__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id__);
  }
  if (from.num_() != 0) {
    set_num_(from.num_());
  }
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:x3ware.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {

  return true;
}

void Record::Swap(Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Record::InternalSwap(Record* other) {
  id__.Swap(&other->id__);
  std::swap(num__, other->num__);
  features__.UnsafeArenaSwap(&other->features__);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Record::GetTypeName() const {
  return "x3ware.Record";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Record

// optional string id_ = 1;
void Record::clear_id_() {
  id__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Record::id_() const {
  // @@protoc_insertion_point(field_get:x3ware.Record.id_)
  return id__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_id_(const ::std::string& value) {
  
  id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.Record.id_)
}
 void Record::set_id_(const char* value) {
  
  id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.Record.id_)
}
 void Record::set_id_(const char* value, size_t size) {
  
  id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.Record.id_)
}
 ::std::string* Record::mutable_id_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.Record.id_)
  return id__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Record::release_id_() {
  // @@protoc_insertion_point(field_release:x3ware.Record.id_)
  
  return id__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_allocated_id_(::std::string* id_) {
  if (id_ != NULL) {
    
  } else {
    
  }
  id__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.Record.id_)
}

// optional int32 num_ = 2;
void Record::clear_num_() {
  num__ = 0;
}
 ::google::protobuf::int32 Record::num_() const {
  // @@protoc_insertion_point(field_get:x3ware.Record.num_)
  return num__;
}
 void Record::set_num_(::google::protobuf::int32 value) {
  
  num__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Record.num_)
}

// repeated .x3ware.Feature features_ = 3;
int Record::features__size() const {
  return features__.size();
}
void Record::clear_features_() {
  features__.Clear();
}
const ::x3ware::Feature& Record::features_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.Record.features_)
  return features__.Get(index);
}
::x3ware::Feature* Record::mutable_features_(int index) {
  // @@protoc_insertion_point(field_mutable:x3ware.Record.features_)
  return features__.Mutable(index);
}
::x3ware::Feature* Record::add_features_() {
  // @@protoc_insertion_point(field_add:x3ware.Record.features_)
  return features__.Add();
}
::google::protobuf::RepeatedPtrField< ::x3ware::Feature >*
Record::mutable_features_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.Record.features_)
  return &features__;
}
const ::google::protobuf::RepeatedPtrField< ::x3ware::Feature >&
Record::features_() const {
  // @@protoc_insertion_point(field_list:x3ware.Record.features_)
  return features__;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRecord::kSeqIdFieldNumber;
const int ListRecord::kSeqNumFieldNumber;
const int ListRecord::kRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRecord::ListRecord()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:x3ware.ListRecord)
}

void ListRecord::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListRecord::ListRecord(const ListRecord& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:x3ware.ListRecord)
}

void ListRecord::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  seq_id__ = 0;
  seq_num__ = 0;
}

ListRecord::~ListRecord() {
  // @@protoc_insertion_point(destructor:x3ware.ListRecord)
  SharedDtor();
}

void ListRecord::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ListRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ListRecord& ListRecord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_x3ware_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_x3ware_2eproto();
#endif
  return *default_instance_;
}

ListRecord* ListRecord::default_instance_ = NULL;

ListRecord* ListRecord::New(::google::protobuf::Arena* arena) const {
  ListRecord* n = new ListRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:x3ware.ListRecord)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ListRecord, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ListRecord*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seq_id__, seq_num__);

#undef ZR_HELPER_
#undef ZR_

  record__.Clear();
}

bool ListRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:x3ware.ListRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seq_id_ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_id__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq_num_;
        break;
      }

      // optional int32 seq_num_ = 2;
      case 2: {
        if (tag == 16) {
         parse_seq_num_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_num__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record_;
        break;
      }

      // repeated .x3ware.Record record_ = 3;
      case 3: {
        if (tag == 26) {
         parse_record_:
          DO_(input->IncrementRecursionDepth());
         parse_loop_record_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_record_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_record_;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:x3ware.ListRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:x3ware.ListRecord)
  return false;
#undef DO_
}

void ListRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:x3ware.ListRecord)
  // optional int32 seq_id_ = 1;
  if (this->seq_id_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seq_id_(), output);
  }

  // optional int32 seq_num_ = 2;
  if (this->seq_num_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seq_num_(), output);
  }

  // repeated .x3ware.Record record_ = 3;
  for (unsigned int i = 0, n = this->record__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->record_(i), output);
  }

  // @@protoc_insertion_point(serialize_end:x3ware.ListRecord)
}

int ListRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:x3ware.ListRecord)
  int total_size = 0;

  // optional int32 seq_id_ = 1;
  if (this->seq_id_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq_id_());
  }

  // optional int32 seq_num_ = 2;
  if (this->seq_num_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq_num_());
  }

  // repeated .x3ware.Record record_ = 3;
  total_size += 1 * this->record__size();
  for (int i = 0; i < this->record__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ListRecord*>(&from));
}

void ListRecord::MergeFrom(const ListRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:x3ware.ListRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  record__.MergeFrom(from.record__);
  if (from.seq_id_() != 0) {
    set_seq_id_(from.seq_id_());
  }
  if (from.seq_num_() != 0) {
    set_seq_num_(from.seq_num_());
  }
}

void ListRecord::CopyFrom(const ListRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:x3ware.ListRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRecord::IsInitialized() const {

  return true;
}

void ListRecord::Swap(ListRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRecord::InternalSwap(ListRecord* other) {
  std::swap(seq_id__, other->seq_id__);
  std::swap(seq_num__, other->seq_num__);
  record__.UnsafeArenaSwap(&other->record__);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ListRecord::GetTypeName() const {
  return "x3ware.ListRecord";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRecord

// optional int32 seq_id_ = 1;
void ListRecord::clear_seq_id_() {
  seq_id__ = 0;
}
 ::google::protobuf::int32 ListRecord::seq_id_() const {
  // @@protoc_insertion_point(field_get:x3ware.ListRecord.seq_id_)
  return seq_id__;
}
 void ListRecord::set_seq_id_(::google::protobuf::int32 value) {
  
  seq_id__ = value;
  // @@protoc_insertion_point(field_set:x3ware.ListRecord.seq_id_)
}

// optional int32 seq_num_ = 2;
void ListRecord::clear_seq_num_() {
  seq_num__ = 0;
}
 ::google::protobuf::int32 ListRecord::seq_num_() const {
  // @@protoc_insertion_point(field_get:x3ware.ListRecord.seq_num_)
  return seq_num__;
}
 void ListRecord::set_seq_num_(::google::protobuf::int32 value) {
  
  seq_num__ = value;
  // @@protoc_insertion_point(field_set:x3ware.ListRecord.seq_num_)
}

// repeated .x3ware.Record record_ = 3;
int ListRecord::record__size() const {
  return record__.size();
}
void ListRecord::clear_record_() {
  record__.Clear();
}
const ::x3ware::Record& ListRecord::record_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.ListRecord.record_)
  return record__.Get(index);
}
::x3ware::Record* ListRecord::mutable_record_(int index) {
  // @@protoc_insertion_point(field_mutable:x3ware.ListRecord.record_)
  return record__.Mutable(index);
}
::x3ware::Record* ListRecord::add_record_() {
  // @@protoc_insertion_point(field_add:x3ware.ListRecord.record_)
  return record__.Add();
}
::google::protobuf::RepeatedPtrField< ::x3ware::Record >*
ListRecord::mutable_record_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.ListRecord.record_)
  return &record__;
}
const ::google::protobuf::RepeatedPtrField< ::x3ware::Record >&
ListRecord::record_() const {
  // @@protoc_insertion_point(field_list:x3ware.ListRecord.record_)
  return record__;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchParam::kTopNumFieldNumber;
const int SearchParam::kDistanceThrFieldNumber;
const int SearchParam::kSimilarThrFieldNumber;
const int SearchParam::kNumFieldNumber;
const int SearchParam::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchParam::SearchParam()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:x3ware.SearchParam)
}

void SearchParam::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SearchParam::SearchParam(const SearchParam& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:x3ware.SearchParam)
}

void SearchParam::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  top_num__ = 0;
  distance_thr__ = 0;
  similar_thr__ = 0;
  num__ = 0;
}

SearchParam::~SearchParam() {
  // @@protoc_insertion_point(destructor:x3ware.SearchParam)
  SharedDtor();
}

void SearchParam::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SearchParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchParam& SearchParam::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_x3ware_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_x3ware_2eproto();
#endif
  return *default_instance_;
}

SearchParam* SearchParam::default_instance_ = NULL;

SearchParam* SearchParam::New(::google::protobuf::Arena* arena) const {
  SearchParam* n = new SearchParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchParam::Clear() {
// @@protoc_insertion_point(message_clear_start:x3ware.SearchParam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SearchParam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SearchParam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(top_num__, num__);

#undef ZR_HELPER_
#undef ZR_

  features__.Clear();
}

bool SearchParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:x3ware.SearchParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 top_num_ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_num__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_distance_thr_;
        break;
      }

      // optional float distance_thr_ = 2;
      case 2: {
        if (tag == 21) {
         parse_distance_thr_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_thr__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_similar_thr_;
        break;
      }

      // optional float similar_thr_ = 3;
      case 3: {
        if (tag == 29) {
         parse_similar_thr_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &similar_thr__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_;
        break;
      }

      // optional int32 num_ = 4;
      case 4: {
        if (tag == 32) {
         parse_num_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_features_;
        break;
      }

      // repeated .x3ware.Feature features_ = 5;
      case 5: {
        if (tag == 42) {
         parse_features_:
          DO_(input->IncrementRecursionDepth());
         parse_loop_features_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_features_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_features_;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:x3ware.SearchParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:x3ware.SearchParam)
  return false;
#undef DO_
}

void SearchParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:x3ware.SearchParam)
  // optional int32 top_num_ = 1;
  if (this->top_num_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->top_num_(), output);
  }

  // optional float distance_thr_ = 2;
  if (this->distance_thr_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance_thr_(), output);
  }

  // optional float similar_thr_ = 3;
  if (this->similar_thr_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->similar_thr_(), output);
  }

  // optional int32 num_ = 4;
  if (this->num_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_(), output);
  }

  // repeated .x3ware.Feature features_ = 5;
  for (unsigned int i = 0, n = this->features__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->features_(i), output);
  }

  // @@protoc_insertion_point(serialize_end:x3ware.SearchParam)
}

int SearchParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:x3ware.SearchParam)
  int total_size = 0;

  // optional int32 top_num_ = 1;
  if (this->top_num_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top_num_());
  }

  // optional float distance_thr_ = 2;
  if (this->distance_thr_() != 0) {
    total_size += 1 + 4;
  }

  // optional float similar_thr_ = 3;
  if (this->similar_thr_() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 num_ = 4;
  if (this->num_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_());
  }

  // repeated .x3ware.Feature features_ = 5;
  total_size += 1 * this->features__size();
  for (int i = 0; i < this->features__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->features_(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchParam::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchParam*>(&from));
}

void SearchParam::MergeFrom(const SearchParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:x3ware.SearchParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  features__.MergeFrom(from.features__);
  if (from.top_num_() != 0) {
    set_top_num_(from.top_num_());
  }
  if (from.distance_thr_() != 0) {
    set_distance_thr_(from.distance_thr_());
  }
  if (from.similar_thr_() != 0) {
    set_similar_thr_(from.similar_thr_());
  }
  if (from.num_() != 0) {
    set_num_(from.num_());
  }
}

void SearchParam::CopyFrom(const SearchParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:x3ware.SearchParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchParam::IsInitialized() const {

  return true;
}

void SearchParam::Swap(SearchParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchParam::InternalSwap(SearchParam* other) {
  std::swap(top_num__, other->top_num__);
  std::swap(distance_thr__, other->distance_thr__);
  std::swap(similar_thr__, other->similar_thr__);
  std::swap(num__, other->num__);
  features__.UnsafeArenaSwap(&other->features__);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SearchParam::GetTypeName() const {
  return "x3ware.SearchParam";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchParam

// optional int32 top_num_ = 1;
void SearchParam::clear_top_num_() {
  top_num__ = 0;
}
 ::google::protobuf::int32 SearchParam::top_num_() const {
  // @@protoc_insertion_point(field_get:x3ware.SearchParam.top_num_)
  return top_num__;
}
 void SearchParam::set_top_num_(::google::protobuf::int32 value) {
  
  top_num__ = value;
  // @@protoc_insertion_point(field_set:x3ware.SearchParam.top_num_)
}

// optional float distance_thr_ = 2;
void SearchParam::clear_distance_thr_() {
  distance_thr__ = 0;
}
 float SearchParam::distance_thr_() const {
  // @@protoc_insertion_point(field_get:x3ware.SearchParam.distance_thr_)
  return distance_thr__;
}
 void SearchParam::set_distance_thr_(float value) {
  
  distance_thr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.SearchParam.distance_thr_)
}

// optional float similar_thr_ = 3;
void SearchParam::clear_similar_thr_() {
  similar_thr__ = 0;
}
 float SearchParam::similar_thr_() const {
  // @@protoc_insertion_point(field_get:x3ware.SearchParam.similar_thr_)
  return similar_thr__;
}
 void SearchParam::set_similar_thr_(float value) {
  
  similar_thr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.SearchParam.similar_thr_)
}

// optional int32 num_ = 4;
void SearchParam::clear_num_() {
  num__ = 0;
}
 ::google::protobuf::int32 SearchParam::num_() const {
  // @@protoc_insertion_point(field_get:x3ware.SearchParam.num_)
  return num__;
}
 void SearchParam::set_num_(::google::protobuf::int32 value) {
  
  num__ = value;
  // @@protoc_insertion_point(field_set:x3ware.SearchParam.num_)
}

// repeated .x3ware.Feature features_ = 5;
int SearchParam::features__size() const {
  return features__.size();
}
void SearchParam::clear_features_() {
  features__.Clear();
}
const ::x3ware::Feature& SearchParam::features_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.SearchParam.features_)
  return features__.Get(index);
}
::x3ware::Feature* SearchParam::mutable_features_(int index) {
  // @@protoc_insertion_point(field_mutable:x3ware.SearchParam.features_)
  return features__.Mutable(index);
}
::x3ware::Feature* SearchParam::add_features_() {
  // @@protoc_insertion_point(field_add:x3ware.SearchParam.features_)
  return features__.Add();
}
::google::protobuf::RepeatedPtrField< ::x3ware::Feature >*
SearchParam::mutable_features_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.SearchParam.features_)
  return &features__;
}
const ::google::protobuf::RepeatedPtrField< ::x3ware::Feature >&
SearchParam::features_() const {
  // @@protoc_insertion_point(field_list:x3ware.SearchParam.features_)
  return features__;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchResult::kIdFieldNumber;
const int MatchResult::kDistanceFieldNumber;
const int MatchResult::kSimilarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchResult::MatchResult()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:x3ware.MatchResult)
}

void MatchResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MatchResult::MatchResult(const MatchResult& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:x3ware.MatchResult)
}

void MatchResult::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distance__ = 0;
  similar__ = 0;
}

MatchResult::~MatchResult() {
  // @@protoc_insertion_point(destructor:x3ware.MatchResult)
  SharedDtor();
}

void MatchResult::SharedDtor() {
  id__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MatchResult& MatchResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_x3ware_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_x3ware_2eproto();
#endif
  return *default_instance_;
}

MatchResult* MatchResult::default_instance_ = NULL;

MatchResult* MatchResult::New(::google::protobuf::Arena* arena) const {
  MatchResult* n = new MatchResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:x3ware.MatchResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MatchResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MatchResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(distance__, similar__);
  id__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:x3ware.MatchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id_ = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id_().data(), this->id_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "x3ware.MatchResult.id_"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_distance_;
        break;
      }

      // optional float distance_ = 2;
      case 2: {
        if (tag == 21) {
         parse_distance_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_similar_;
        break;
      }

      // optional float similar_ = 3;
      case 3: {
        if (tag == 29) {
         parse_similar_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &similar__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:x3ware.MatchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:x3ware.MatchResult)
  return false;
#undef DO_
}

void MatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:x3ware.MatchResult)
  // optional string id_ = 1;
  if (this->id_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id_().data(), this->id_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "x3ware.MatchResult.id_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id_(), output);
  }

  // optional float distance_ = 2;
  if (this->distance_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance_(), output);
  }

  // optional float similar_ = 3;
  if (this->similar_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->similar_(), output);
  }

  // @@protoc_insertion_point(serialize_end:x3ware.MatchResult)
}

int MatchResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:x3ware.MatchResult)
  int total_size = 0;

  // optional string id_ = 1;
  if (this->id_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id_());
  }

  // optional float distance_ = 2;
  if (this->distance_() != 0) {
    total_size += 1 + 4;
  }

  // optional float similar_ = 3;
  if (this->similar_() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MatchResult*>(&from));
}

void MatchResult::MergeFrom(const MatchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:x3ware.MatchResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id_().size() > 0) {

    id__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id__);
  }
  if (from.distance_() != 0) {
    set_distance_(from.distance_());
  }
  if (from.similar_() != 0) {
    set_similar_(from.similar_());
  }
}

void MatchResult::CopyFrom(const MatchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:x3ware.MatchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchResult::IsInitialized() const {

  return true;
}

void MatchResult::Swap(MatchResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchResult::InternalSwap(MatchResult* other) {
  id__.Swap(&other->id__);
  std::swap(distance__, other->distance__);
  std::swap(similar__, other->similar__);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MatchResult::GetTypeName() const {
  return "x3ware.MatchResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatchResult

// optional string id_ = 1;
void MatchResult::clear_id_() {
  id__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MatchResult::id_() const {
  // @@protoc_insertion_point(field_get:x3ware.MatchResult.id_)
  return id__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatchResult::set_id_(const ::std::string& value) {
  
  id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.MatchResult.id_)
}
 void MatchResult::set_id_(const char* value) {
  
  id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.MatchResult.id_)
}
 void MatchResult::set_id_(const char* value, size_t size) {
  
  id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.MatchResult.id_)
}
 ::std::string* MatchResult::mutable_id_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.MatchResult.id_)
  return id__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MatchResult::release_id_() {
  // @@protoc_insertion_point(field_release:x3ware.MatchResult.id_)
  
  return id__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatchResult::set_allocated_id_(::std::string* id_) {
  if (id_ != NULL) {
    
  } else {
    
  }
  id__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.MatchResult.id_)
}

// optional float distance_ = 2;
void MatchResult::clear_distance_() {
  distance__ = 0;
}
 float MatchResult::distance_() const {
  // @@protoc_insertion_point(field_get:x3ware.MatchResult.distance_)
  return distance__;
}
 void MatchResult::set_distance_(float value) {
  
  distance__ = value;
  // @@protoc_insertion_point(field_set:x3ware.MatchResult.distance_)
}

// optional float similar_ = 3;
void MatchResult::clear_similar_() {
  similar__ = 0;
}
 float MatchResult::similar_() const {
  // @@protoc_insertion_point(field_get:x3ware.MatchResult.similar_)
  return similar__;
}
 void MatchResult::set_similar_(float value) {
  
  similar__ = value;
  // @@protoc_insertion_point(field_set:x3ware.MatchResult.similar_)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchResult::kMatchFieldNumber;
const int SearchResult::kNumFieldNumber;
const int SearchResult::kMatchResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchResult::SearchResult()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:x3ware.SearchResult)
}

void SearchResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SearchResult::SearchResult(const SearchResult& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:x3ware.SearchResult)
}

void SearchResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  match__ = false;
  num__ = 0;
}

SearchResult::~SearchResult() {
  // @@protoc_insertion_point(destructor:x3ware.SearchResult)
  SharedDtor();
}

void SearchResult::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SearchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchResult& SearchResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_x3ware_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_x3ware_2eproto();
#endif
  return *default_instance_;
}

SearchResult* SearchResult::default_instance_ = NULL;

SearchResult* SearchResult::New(::google::protobuf::Arena* arena) const {
  SearchResult* n = new SearchResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:x3ware.SearchResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SearchResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SearchResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(match__, num__);

#undef ZR_HELPER_
#undef ZR_

  match_result__.Clear();
}

bool SearchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:x3ware.SearchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool match_ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_;
        break;
      }

      // optional int32 num_ = 2;
      case 2: {
        if (tag == 16) {
         parse_num_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_match_result_;
        break;
      }

      // repeated .x3ware.MatchResult match_result_ = 3;
      case 3: {
        if (tag == 26) {
         parse_match_result_:
          DO_(input->IncrementRecursionDepth());
         parse_loop_match_result_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_match_result_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_match_result_;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:x3ware.SearchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:x3ware.SearchResult)
  return false;
#undef DO_
}

void SearchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:x3ware.SearchResult)
  // optional bool match_ = 1;
  if (this->match_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->match_(), output);
  }

  // optional int32 num_ = 2;
  if (this->num_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_(), output);
  }

  // repeated .x3ware.MatchResult match_result_ = 3;
  for (unsigned int i = 0, n = this->match_result__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->match_result_(i), output);
  }

  // @@protoc_insertion_point(serialize_end:x3ware.SearchResult)
}

int SearchResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:x3ware.SearchResult)
  int total_size = 0;

  // optional bool match_ = 1;
  if (this->match_() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 num_ = 2;
  if (this->num_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_());
  }

  // repeated .x3ware.MatchResult match_result_ = 3;
  total_size += 1 * this->match_result__size();
  for (int i = 0; i < this->match_result__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->match_result_(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchResult*>(&from));
}

void SearchResult::MergeFrom(const SearchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:x3ware.SearchResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  match_result__.MergeFrom(from.match_result__);
  if (from.match_() != 0) {
    set_match_(from.match_());
  }
  if (from.num_() != 0) {
    set_num_(from.num_());
  }
}

void SearchResult::CopyFrom(const SearchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:x3ware.SearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResult::IsInitialized() const {

  return true;
}

void SearchResult::Swap(SearchResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchResult::InternalSwap(SearchResult* other) {
  std::swap(match__, other->match__);
  std::swap(num__, other->num__);
  match_result__.UnsafeArenaSwap(&other->match_result__);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SearchResult::GetTypeName() const {
  return "x3ware.SearchResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchResult

// optional bool match_ = 1;
void SearchResult::clear_match_() {
  match__ = false;
}
 bool SearchResult::match_() const {
  // @@protoc_insertion_point(field_get:x3ware.SearchResult.match_)
  return match__;
}
 void SearchResult::set_match_(bool value) {
  
  match__ = value;
  // @@protoc_insertion_point(field_set:x3ware.SearchResult.match_)
}

// optional int32 num_ = 2;
void SearchResult::clear_num_() {
  num__ = 0;
}
 ::google::protobuf::int32 SearchResult::num_() const {
  // @@protoc_insertion_point(field_get:x3ware.SearchResult.num_)
  return num__;
}
 void SearchResult::set_num_(::google::protobuf::int32 value) {
  
  num__ = value;
  // @@protoc_insertion_point(field_set:x3ware.SearchResult.num_)
}

// repeated .x3ware.MatchResult match_result_ = 3;
int SearchResult::match_result__size() const {
  return match_result__.size();
}
void SearchResult::clear_match_result_() {
  match_result__.Clear();
}
const ::x3ware::MatchResult& SearchResult::match_result_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.SearchResult.match_result_)
  return match_result__.Get(index);
}
::x3ware::MatchResult* SearchResult::mutable_match_result_(int index) {
  // @@protoc_insertion_point(field_mutable:x3ware.SearchResult.match_result_)
  return match_result__.Mutable(index);
}
::x3ware::MatchResult* SearchResult::add_match_result_() {
  // @@protoc_insertion_point(field_add:x3ware.SearchResult.match_result_)
  return match_result__.Add();
}
::google::protobuf::RepeatedPtrField< ::x3ware::MatchResult >*
SearchResult::mutable_match_result_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.SearchResult.match_result_)
  return &match_result__;
}
const ::google::protobuf::RepeatedPtrField< ::x3ware::MatchResult >&
SearchResult::match_result_() const {
  // @@protoc_insertion_point(field_list:x3ware.SearchResult.match_result_)
  return match_result__;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompareParam::kDistanceThrFieldNumber;
const int CompareParam::kSimilarThrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompareParam::CompareParam()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:x3ware.CompareParam)
}

void CompareParam::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CompareParam::CompareParam(const CompareParam& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:x3ware.CompareParam)
}

void CompareParam::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  distance_thr__ = 0;
  similar_thr__ = 0;
}

CompareParam::~CompareParam() {
  // @@protoc_insertion_point(destructor:x3ware.CompareParam)
  SharedDtor();
}

void CompareParam::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CompareParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CompareParam& CompareParam::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_x3ware_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_x3ware_2eproto();
#endif
  return *default_instance_;
}

CompareParam* CompareParam::default_instance_ = NULL;

CompareParam* CompareParam::New(::google::protobuf::Arena* arena) const {
  CompareParam* n = new CompareParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompareParam::Clear() {
// @@protoc_insertion_point(message_clear_start:x3ware.CompareParam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CompareParam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CompareParam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(distance_thr__, similar_thr__);

#undef ZR_HELPER_
#undef ZR_

}

bool CompareParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:x3ware.CompareParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float distance_thr_ = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_thr__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_similar_thr_;
        break;
      }

      // optional float similar_thr_ = 2;
      case 2: {
        if (tag == 21) {
         parse_similar_thr_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &similar_thr__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:x3ware.CompareParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:x3ware.CompareParam)
  return false;
#undef DO_
}

void CompareParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:x3ware.CompareParam)
  // optional float distance_thr_ = 1;
  if (this->distance_thr_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->distance_thr_(), output);
  }

  // optional float similar_thr_ = 2;
  if (this->similar_thr_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->similar_thr_(), output);
  }

  // @@protoc_insertion_point(serialize_end:x3ware.CompareParam)
}

int CompareParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:x3ware.CompareParam)
  int total_size = 0;

  // optional float distance_thr_ = 1;
  if (this->distance_thr_() != 0) {
    total_size += 1 + 4;
  }

  // optional float similar_thr_ = 2;
  if (this->similar_thr_() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompareParam::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CompareParam*>(&from));
}

void CompareParam::MergeFrom(const CompareParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:x3ware.CompareParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.distance_thr_() != 0) {
    set_distance_thr_(from.distance_thr_());
  }
  if (from.similar_thr_() != 0) {
    set_similar_thr_(from.similar_thr_());
  }
}

void CompareParam::CopyFrom(const CompareParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:x3ware.CompareParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareParam::IsInitialized() const {

  return true;
}

void CompareParam::Swap(CompareParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompareParam::InternalSwap(CompareParam* other) {
  std::swap(distance_thr__, other->distance_thr__);
  std::swap(similar_thr__, other->similar_thr__);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CompareParam::GetTypeName() const {
  return "x3ware.CompareParam";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompareParam

// optional float distance_thr_ = 1;
void CompareParam::clear_distance_thr_() {
  distance_thr__ = 0;
}
 float CompareParam::distance_thr_() const {
  // @@protoc_insertion_point(field_get:x3ware.CompareParam.distance_thr_)
  return distance_thr__;
}
 void CompareParam::set_distance_thr_(float value) {
  
  distance_thr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.CompareParam.distance_thr_)
}

// optional float similar_thr_ = 2;
void CompareParam::clear_similar_thr_() {
  similar_thr__ = 0;
}
 float CompareParam::similar_thr_() const {
  // @@protoc_insertion_point(field_get:x3ware.CompareParam.similar_thr_)
  return similar_thr__;
}
 void CompareParam::set_similar_thr_(float value) {
  
  similar_thr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.CompareParam.similar_thr_)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompareResult::kMatchFieldNumber;
const int CompareResult::kDistanceFieldNumber;
const int CompareResult::kSimilarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompareResult::CompareResult()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:x3ware.CompareResult)
}

void CompareResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CompareResult::CompareResult(const CompareResult& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:x3ware.CompareResult)
}

void CompareResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  match__ = false;
  distance__ = 0;
  similar__ = 0;
}

CompareResult::~CompareResult() {
  // @@protoc_insertion_point(destructor:x3ware.CompareResult)
  SharedDtor();
}

void CompareResult::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CompareResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CompareResult& CompareResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_x3ware_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_x3ware_2eproto();
#endif
  return *default_instance_;
}

CompareResult* CompareResult::default_instance_ = NULL;

CompareResult* CompareResult::New(::google::protobuf::Arena* arena) const {
  CompareResult* n = new CompareResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompareResult::Clear() {
// @@protoc_insertion_point(message_clear_start:x3ware.CompareResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CompareResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CompareResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(match__, similar__);

#undef ZR_HELPER_
#undef ZR_

}

bool CompareResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:x3ware.CompareResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool match_ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_distance_;
        break;
      }

      // optional float distance_ = 2;
      case 2: {
        if (tag == 21) {
         parse_distance_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_similar_;
        break;
      }

      // optional float similar_ = 3;
      case 3: {
        if (tag == 29) {
         parse_similar_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &similar__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:x3ware.CompareResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:x3ware.CompareResult)
  return false;
#undef DO_
}

void CompareResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:x3ware.CompareResult)
  // optional bool match_ = 1;
  if (this->match_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->match_(), output);
  }

  // optional float distance_ = 2;
  if (this->distance_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance_(), output);
  }

  // optional float similar_ = 3;
  if (this->similar_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->similar_(), output);
  }

  // @@protoc_insertion_point(serialize_end:x3ware.CompareResult)
}

int CompareResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:x3ware.CompareResult)
  int total_size = 0;

  // optional bool match_ = 1;
  if (this->match_() != 0) {
    total_size += 1 + 1;
  }

  // optional float distance_ = 2;
  if (this->distance_() != 0) {
    total_size += 1 + 4;
  }

  // optional float similar_ = 3;
  if (this->similar_() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompareResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CompareResult*>(&from));
}

void CompareResult::MergeFrom(const CompareResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:x3ware.CompareResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.match_() != 0) {
    set_match_(from.match_());
  }
  if (from.distance_() != 0) {
    set_distance_(from.distance_());
  }
  if (from.similar_() != 0) {
    set_similar_(from.similar_());
  }
}

void CompareResult::CopyFrom(const CompareResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:x3ware.CompareResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareResult::IsInitialized() const {

  return true;
}

void CompareResult::Swap(CompareResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompareResult::InternalSwap(CompareResult* other) {
  std::swap(match__, other->match__);
  std::swap(distance__, other->distance__);
  std::swap(similar__, other->similar__);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CompareResult::GetTypeName() const {
  return "x3ware.CompareResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompareResult

// optional bool match_ = 1;
void CompareResult::clear_match_() {
  match__ = false;
}
 bool CompareResult::match_() const {
  // @@protoc_insertion_point(field_get:x3ware.CompareResult.match_)
  return match__;
}
 void CompareResult::set_match_(bool value) {
  
  match__ = value;
  // @@protoc_insertion_point(field_set:x3ware.CompareResult.match_)
}

// optional float distance_ = 2;
void CompareResult::clear_distance_() {
  distance__ = 0;
}
 float CompareResult::distance_() const {
  // @@protoc_insertion_point(field_get:x3ware.CompareResult.distance_)
  return distance__;
}
 void CompareResult::set_distance_(float value) {
  
  distance__ = value;
  // @@protoc_insertion_point(field_set:x3ware.CompareResult.distance_)
}

// optional float similar_ = 3;
void CompareResult::clear_similar_() {
  similar__ = 0;
}
 float CompareResult::similar_() const {
  // @@protoc_insertion_point(field_get:x3ware.CompareResult.similar_)
  return similar__;
}
 void CompareResult::set_similar_(float value) {
  
  similar__ = value;
  // @@protoc_insertion_point(field_set:x3ware.CompareResult.similar_)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelVerCheck::kCurrentVersionFieldNumber;
const int ModelVerCheck::kLastVersionFieldNumber;
const int ModelVerCheck::kNeedUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelVerCheck::ModelVerCheck()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:x3ware.ModelVerCheck)
}

void ModelVerCheck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ModelVerCheck::ModelVerCheck(const ModelVerCheck& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:x3ware.ModelVerCheck)
}

void ModelVerCheck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  current_version__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_version__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_update__ = false;
}

ModelVerCheck::~ModelVerCheck() {
  // @@protoc_insertion_point(destructor:x3ware.ModelVerCheck)
  SharedDtor();
}

void ModelVerCheck::SharedDtor() {
  current_version__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_version__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ModelVerCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModelVerCheck& ModelVerCheck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_x3ware_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_x3ware_2eproto();
#endif
  return *default_instance_;
}

ModelVerCheck* ModelVerCheck::default_instance_ = NULL;

ModelVerCheck* ModelVerCheck::New(::google::protobuf::Arena* arena) const {
  ModelVerCheck* n = new ModelVerCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelVerCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:x3ware.ModelVerCheck)
  current_version__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_version__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  need_update__ = false;
}

bool ModelVerCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:x3ware.ModelVerCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string current_version_ = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_version_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->current_version_().data(), this->current_version_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "x3ware.ModelVerCheck.current_version_"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_last_version_;
        break;
      }

      // optional string last_version_ = 2;
      case 2: {
        if (tag == 18) {
         parse_last_version_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_version_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_version_().data(), this->last_version_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "x3ware.ModelVerCheck.last_version_"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_need_update_;
        break;
      }

      // optional bool need_update_ = 3;
      case 3: {
        if (tag == 24) {
         parse_need_update_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_update__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:x3ware.ModelVerCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:x3ware.ModelVerCheck)
  return false;
#undef DO_
}

void ModelVerCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:x3ware.ModelVerCheck)
  // optional string current_version_ = 1;
  if (this->current_version_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_version_().data(), this->current_version_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "x3ware.ModelVerCheck.current_version_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->current_version_(), output);
  }

  // optional string last_version_ = 2;
  if (this->last_version_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_version_().data(), this->last_version_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "x3ware.ModelVerCheck.last_version_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->last_version_(), output);
  }

  // optional bool need_update_ = 3;
  if (this->need_update_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->need_update_(), output);
  }

  // @@protoc_insertion_point(serialize_end:x3ware.ModelVerCheck)
}

int ModelVerCheck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:x3ware.ModelVerCheck)
  int total_size = 0;

  // optional string current_version_ = 1;
  if (this->current_version_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->current_version_());
  }

  // optional string last_version_ = 2;
  if (this->last_version_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_version_());
  }

  // optional bool need_update_ = 3;
  if (this->need_update_() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelVerCheck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModelVerCheck*>(&from));
}

void ModelVerCheck::MergeFrom(const ModelVerCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:x3ware.ModelVerCheck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.current_version_().size() > 0) {

    current_version__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_version__);
  }
  if (from.last_version_().size() > 0) {

    last_version__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_version__);
  }
  if (from.need_update_() != 0) {
    set_need_update_(from.need_update_());
  }
}

void ModelVerCheck::CopyFrom(const ModelVerCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:x3ware.ModelVerCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVerCheck::IsInitialized() const {

  return true;
}

void ModelVerCheck::Swap(ModelVerCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelVerCheck::InternalSwap(ModelVerCheck* other) {
  current_version__.Swap(&other->current_version__);
  last_version__.Swap(&other->last_version__);
  std::swap(need_update__, other->need_update__);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ModelVerCheck::GetTypeName() const {
  return "x3ware.ModelVerCheck";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelVerCheck

// optional string current_version_ = 1;
void ModelVerCheck::clear_current_version_() {
  current_version__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ModelVerCheck::current_version_() const {
  // @@protoc_insertion_point(field_get:x3ware.ModelVerCheck.current_version_)
  return current_version__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelVerCheck::set_current_version_(const ::std::string& value) {
  
  current_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.ModelVerCheck.current_version_)
}
 void ModelVerCheck::set_current_version_(const char* value) {
  
  current_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.ModelVerCheck.current_version_)
}
 void ModelVerCheck::set_current_version_(const char* value, size_t size) {
  
  current_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.ModelVerCheck.current_version_)
}
 ::std::string* ModelVerCheck::mutable_current_version_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.ModelVerCheck.current_version_)
  return current_version__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelVerCheck::release_current_version_() {
  // @@protoc_insertion_point(field_release:x3ware.ModelVerCheck.current_version_)
  
  return current_version__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelVerCheck::set_allocated_current_version_(::std::string* current_version_) {
  if (current_version_ != NULL) {
    
  } else {
    
  }
  current_version__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_version_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.ModelVerCheck.current_version_)
}

// optional string last_version_ = 2;
void ModelVerCheck::clear_last_version_() {
  last_version__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ModelVerCheck::last_version_() const {
  // @@protoc_insertion_point(field_get:x3ware.ModelVerCheck.last_version_)
  return last_version__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelVerCheck::set_last_version_(const ::std::string& value) {
  
  last_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.ModelVerCheck.last_version_)
}
 void ModelVerCheck::set_last_version_(const char* value) {
  
  last_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.ModelVerCheck.last_version_)
}
 void ModelVerCheck::set_last_version_(const char* value, size_t size) {
  
  last_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.ModelVerCheck.last_version_)
}
 ::std::string* ModelVerCheck::mutable_last_version_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.ModelVerCheck.last_version_)
  return last_version__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModelVerCheck::release_last_version_() {
  // @@protoc_insertion_point(field_release:x3ware.ModelVerCheck.last_version_)
  
  return last_version__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModelVerCheck::set_allocated_last_version_(::std::string* last_version_) {
  if (last_version_ != NULL) {
    
  } else {
    
  }
  last_version__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_version_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.ModelVerCheck.last_version_)
}

// optional bool need_update_ = 3;
void ModelVerCheck::clear_need_update_() {
  need_update__ = false;
}
 bool ModelVerCheck::need_update_() const {
  // @@protoc_insertion_point(field_get:x3ware.ModelVerCheck.need_update_)
  return need_update__;
}
 void ModelVerCheck::set_need_update_(bool value) {
  
  need_update__ = value;
  // @@protoc_insertion_point(field_set:x3ware.ModelVerCheck.need_update_)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool WareMessage_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WareMessage_Type WareMessage::Unknown;
const WareMessage_Type WareMessage::Init;
const WareMessage_Type WareMessage::DeInit;
const WareMessage_Type WareMessage::GetVersion;
const WareMessage_Type WareMessage::TableOper;
const WareMessage_Type WareMessage::RecordOper;
const WareMessage_Type WareMessage::FeatureOper;
const WareMessage_Type WareMessage::Search;
const WareMessage_Type WareMessage::Compare;
const WareMessage_Type WareMessage::CheckModelVersion;
const WareMessage_Type WareMessage::Type_MIN;
const WareMessage_Type WareMessage::Type_MAX;
const int WareMessage::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool WareMessage_Oper_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WareMessage_Oper WareMessage::Add;
const WareMessage_Oper WareMessage::Del;
const WareMessage_Oper WareMessage::Upd;
const WareMessage_Oper WareMessage::Query;
const WareMessage_Oper WareMessage::Oper_MIN;
const WareMessage_Oper WareMessage::Oper_MAX;
const int WareMessage::Oper_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool WareMessage_Ack_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WareMessage_Ack WareMessage::Uknown;
const WareMessage_Ack WareMessage::Success;
const WareMessage_Ack WareMessage::Fail;
const WareMessage_Ack WareMessage::Ack_MIN;
const WareMessage_Ack WareMessage::Ack_MAX;
const int WareMessage::Ack_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WareMessage::kTypeFieldNumber;
const int WareMessage::kOperFieldNumber;
const int WareMessage::kAckFieldNumber;
const int WareMessage::kErrorCodeFieldNumber;
const int WareMessage::kInfoFieldNumber;
const int WareMessage::kTableFieldNumber;
const int WareMessage::kRecordFieldNumber;
const int WareMessage::kSearchParamFieldNumber;
const int WareMessage::kSearchResultFieldNumber;
const int WareMessage::kCompareParamFieldNumber;
const int WareMessage::kCompareResultFieldNumber;
const int WareMessage::kModelVersionCheckFieldNumber;
const int WareMessage::kListRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WareMessage::WareMessage()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:x3ware.WareMessage)
}

void WareMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info__ = const_cast< ::x3ware::ModuleInfo*>(
      ::x3ware::ModuleInfo::internal_default_instance());
#else
  info__ = const_cast< ::x3ware::ModuleInfo*>(&::x3ware::ModuleInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  search_param__ = const_cast< ::x3ware::SearchParam*>(
      ::x3ware::SearchParam::internal_default_instance());
#else
  search_param__ = const_cast< ::x3ware::SearchParam*>(&::x3ware::SearchParam::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  search_result__ = const_cast< ::x3ware::SearchResult*>(
      ::x3ware::SearchResult::internal_default_instance());
#else
  search_result__ = const_cast< ::x3ware::SearchResult*>(&::x3ware::SearchResult::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  compare_param__ = const_cast< ::x3ware::CompareParam*>(
      ::x3ware::CompareParam::internal_default_instance());
#else
  compare_param__ = const_cast< ::x3ware::CompareParam*>(&::x3ware::CompareParam::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  compare_result__ = const_cast< ::x3ware::CompareResult*>(
      ::x3ware::CompareResult::internal_default_instance());
#else
  compare_result__ = const_cast< ::x3ware::CompareResult*>(&::x3ware::CompareResult::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  model_version_check__ = const_cast< ::x3ware::ModelVerCheck*>(
      ::x3ware::ModelVerCheck::internal_default_instance());
#else
  model_version_check__ = const_cast< ::x3ware::ModelVerCheck*>(&::x3ware::ModelVerCheck::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  list_record__ = const_cast< ::x3ware::ListRecord*>(
      ::x3ware::ListRecord::internal_default_instance());
#else
  list_record__ = const_cast< ::x3ware::ListRecord*>(&::x3ware::ListRecord::default_instance());
#endif
}

WareMessage::WareMessage(const WareMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:x3ware.WareMessage)
}

void WareMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type__ = 0;
  oper__ = 0;
  ack__ = 0;
  error_code__ = 0;
  info__ = NULL;
  search_param__ = NULL;
  search_result__ = NULL;
  compare_param__ = NULL;
  compare_result__ = NULL;
  model_version_check__ = NULL;
  list_record__ = NULL;
}

WareMessage::~WareMessage() {
  // @@protoc_insertion_point(destructor:x3ware.WareMessage)
  SharedDtor();
}

void WareMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info__;
    delete search_param__;
    delete search_result__;
    delete compare_param__;
    delete compare_result__;
    delete model_version_check__;
    delete list_record__;
  }
}

void WareMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WareMessage& WareMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_x3ware_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_x3ware_2eproto();
#endif
  return *default_instance_;
}

WareMessage* WareMessage::default_instance_ = NULL;

WareMessage* WareMessage::New(::google::protobuf::Arena* arena) const {
  WareMessage* n = new WareMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WareMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:x3ware.WareMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WareMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WareMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type__, error_code__);
  if (GetArenaNoVirtual() == NULL && info__ != NULL) delete info__;
  info__ = NULL;
  if (GetArenaNoVirtual() == NULL && search_param__ != NULL) delete search_param__;
  search_param__ = NULL;
  if (GetArenaNoVirtual() == NULL && search_result__ != NULL) delete search_result__;
  search_result__ = NULL;
  if (GetArenaNoVirtual() == NULL && compare_param__ != NULL) delete compare_param__;
  compare_param__ = NULL;
  if (GetArenaNoVirtual() == NULL && compare_result__ != NULL) delete compare_result__;
  compare_result__ = NULL;
  if (GetArenaNoVirtual() == NULL && model_version_check__ != NULL) delete model_version_check__;
  model_version_check__ = NULL;
  if (GetArenaNoVirtual() == NULL && list_record__ != NULL) delete list_record__;
  list_record__ = NULL;

#undef ZR_HELPER_
#undef ZR_

  table__.Clear();
  record__.Clear();
}

bool WareMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:x3ware.WareMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .x3ware.WareMessage.Type type_ = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type_(static_cast< ::x3ware::WareMessage_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oper_;
        break;
      }

      // optional .x3ware.WareMessage.Oper oper_ = 2;
      case 2: {
        if (tag == 16) {
         parse_oper_:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_oper_(static_cast< ::x3ware::WareMessage_Oper >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ack_;
        break;
      }

      // optional .x3ware.WareMessage.Ack ack_ = 3;
      case 3: {
        if (tag == 24) {
         parse_ack_:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ack_(static_cast< ::x3ware::WareMessage_Ack >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_error_code_;
        break;
      }

      // optional int32 error_code_ = 4;
      case 4: {
        if (tag == 32) {
         parse_error_code_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_info_;
        break;
      }

      // optional .x3ware.ModuleInfo info_ = 5;
      case 5: {
        if (tag == 42) {
         parse_info_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_table_;
        break;
      }

      // repeated .x3ware.Table table_ = 6;
      case 6: {
        if (tag == 50) {
         parse_table_:
          DO_(input->IncrementRecursionDepth());
         parse_loop_table_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_table_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_table_;
        if (input->ExpectTag(58)) goto parse_loop_record_;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .x3ware.Record record_ = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_record_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_record_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_record_;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_search_param_;
        break;
      }

      // optional .x3ware.SearchParam search_param_ = 8;
      case 8: {
        if (tag == 66) {
         parse_search_param_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_param_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_search_result_;
        break;
      }

      // optional .x3ware.SearchResult search_result_ = 9;
      case 9: {
        if (tag == 74) {
         parse_search_result_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_result_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_compare_param_;
        break;
      }

      // optional .x3ware.CompareParam compare_param_ = 10;
      case 10: {
        if (tag == 82) {
         parse_compare_param_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compare_param_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_compare_result_;
        break;
      }

      // optional .x3ware.CompareResult compare_result_ = 11;
      case 11: {
        if (tag == 90) {
         parse_compare_result_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compare_result_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_model_version_check_;
        break;
      }

      // optional .x3ware.ModelVerCheck model_version_check_ = 12;
      case 12: {
        if (tag == 98) {
         parse_model_version_check_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_version_check_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_list_record_;
        break;
      }

      // optional .x3ware.ListRecord list_record_ = 13;
      case 13: {
        if (tag == 106) {
         parse_list_record_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_record_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:x3ware.WareMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:x3ware.WareMessage)
  return false;
#undef DO_
}

void WareMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:x3ware.WareMessage)
  // optional .x3ware.WareMessage.Type type_ = 1;
  if (this->type_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type_(), output);
  }

  // optional .x3ware.WareMessage.Oper oper_ = 2;
  if (this->oper_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->oper_(), output);
  }

  // optional .x3ware.WareMessage.Ack ack_ = 3;
  if (this->ack_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ack_(), output);
  }

  // optional int32 error_code_ = 4;
  if (this->error_code_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->error_code_(), output);
  }

  // optional .x3ware.ModuleInfo info_ = 5;
  if (this->has_info_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->info__, output);
  }

  // repeated .x3ware.Table table_ = 6;
  for (unsigned int i = 0, n = this->table__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->table_(i), output);
  }

  // repeated .x3ware.Record record_ = 7;
  for (unsigned int i = 0, n = this->record__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->record_(i), output);
  }

  // optional .x3ware.SearchParam search_param_ = 8;
  if (this->has_search_param_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->search_param__, output);
  }

  // optional .x3ware.SearchResult search_result_ = 9;
  if (this->has_search_result_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->search_result__, output);
  }

  // optional .x3ware.CompareParam compare_param_ = 10;
  if (this->has_compare_param_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->compare_param__, output);
  }

  // optional .x3ware.CompareResult compare_result_ = 11;
  if (this->has_compare_result_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->compare_result__, output);
  }

  // optional .x3ware.ModelVerCheck model_version_check_ = 12;
  if (this->has_model_version_check_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->model_version_check__, output);
  }

  // optional .x3ware.ListRecord list_record_ = 13;
  if (this->has_list_record_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->list_record__, output);
  }

  // @@protoc_insertion_point(serialize_end:x3ware.WareMessage)
}

int WareMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:x3ware.WareMessage)
  int total_size = 0;

  // optional .x3ware.WareMessage.Type type_ = 1;
  if (this->type_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_());
  }

  // optional .x3ware.WareMessage.Oper oper_ = 2;
  if (this->oper_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper_());
  }

  // optional .x3ware.WareMessage.Ack ack_ = 3;
  if (this->ack_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ack_());
  }

  // optional int32 error_code_ = 4;
  if (this->error_code_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code_());
  }

  // optional .x3ware.ModuleInfo info_ = 5;
  if (this->has_info_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info__);
  }

  // optional .x3ware.SearchParam search_param_ = 8;
  if (this->has_search_param_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->search_param__);
  }

  // optional .x3ware.SearchResult search_result_ = 9;
  if (this->has_search_result_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->search_result__);
  }

  // optional .x3ware.CompareParam compare_param_ = 10;
  if (this->has_compare_param_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compare_param__);
  }

  // optional .x3ware.CompareResult compare_result_ = 11;
  if (this->has_compare_result_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compare_result__);
  }

  // optional .x3ware.ModelVerCheck model_version_check_ = 12;
  if (this->has_model_version_check_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->model_version_check__);
  }

  // optional .x3ware.ListRecord list_record_ = 13;
  if (this->has_list_record_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->list_record__);
  }

  // repeated .x3ware.Table table_ = 6;
  total_size += 1 * this->table__size();
  for (int i = 0; i < this->table__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_(i));
  }

  // repeated .x3ware.Record record_ = 7;
  total_size += 1 * this->record__size();
  for (int i = 0; i < this->record__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WareMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WareMessage*>(&from));
}

void WareMessage::MergeFrom(const WareMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:x3ware.WareMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  table__.MergeFrom(from.table__);
  record__.MergeFrom(from.record__);
  if (from.type_() != 0) {
    set_type_(from.type_());
  }
  if (from.oper_() != 0) {
    set_oper_(from.oper_());
  }
  if (from.ack_() != 0) {
    set_ack_(from.ack_());
  }
  if (from.error_code_() != 0) {
    set_error_code_(from.error_code_());
  }
  if (from.has_info_()) {
    mutable_info_()->::x3ware::ModuleInfo::MergeFrom(from.info_());
  }
  if (from.has_search_param_()) {
    mutable_search_param_()->::x3ware::SearchParam::MergeFrom(from.search_param_());
  }
  if (from.has_search_result_()) {
    mutable_search_result_()->::x3ware::SearchResult::MergeFrom(from.search_result_());
  }
  if (from.has_compare_param_()) {
    mutable_compare_param_()->::x3ware::CompareParam::MergeFrom(from.compare_param_());
  }
  if (from.has_compare_result_()) {
    mutable_compare_result_()->::x3ware::CompareResult::MergeFrom(from.compare_result_());
  }
  if (from.has_model_version_check_()) {
    mutable_model_version_check_()->::x3ware::ModelVerCheck::MergeFrom(from.model_version_check_());
  }
  if (from.has_list_record_()) {
    mutable_list_record_()->::x3ware::ListRecord::MergeFrom(from.list_record_());
  }
}

void WareMessage::CopyFrom(const WareMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:x3ware.WareMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WareMessage::IsInitialized() const {

  return true;
}

void WareMessage::Swap(WareMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WareMessage::InternalSwap(WareMessage* other) {
  std::swap(type__, other->type__);
  std::swap(oper__, other->oper__);
  std::swap(ack__, other->ack__);
  std::swap(error_code__, other->error_code__);
  std::swap(info__, other->info__);
  table__.UnsafeArenaSwap(&other->table__);
  record__.UnsafeArenaSwap(&other->record__);
  std::swap(search_param__, other->search_param__);
  std::swap(search_result__, other->search_result__);
  std::swap(compare_param__, other->compare_param__);
  std::swap(compare_result__, other->compare_result__);
  std::swap(model_version_check__, other->model_version_check__);
  std::swap(list_record__, other->list_record__);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string WareMessage::GetTypeName() const {
  return "x3ware.WareMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WareMessage

// optional .x3ware.WareMessage.Type type_ = 1;
void WareMessage::clear_type_() {
  type__ = 0;
}
 ::x3ware::WareMessage_Type WareMessage::type_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.type_)
  return static_cast< ::x3ware::WareMessage_Type >(type__);
}
 void WareMessage::set_type_(::x3ware::WareMessage_Type value) {
  
  type__ = value;
  // @@protoc_insertion_point(field_set:x3ware.WareMessage.type_)
}

// optional .x3ware.WareMessage.Oper oper_ = 2;
void WareMessage::clear_oper_() {
  oper__ = 0;
}
 ::x3ware::WareMessage_Oper WareMessage::oper_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.oper_)
  return static_cast< ::x3ware::WareMessage_Oper >(oper__);
}
 void WareMessage::set_oper_(::x3ware::WareMessage_Oper value) {
  
  oper__ = value;
  // @@protoc_insertion_point(field_set:x3ware.WareMessage.oper_)
}

// optional .x3ware.WareMessage.Ack ack_ = 3;
void WareMessage::clear_ack_() {
  ack__ = 0;
}
 ::x3ware::WareMessage_Ack WareMessage::ack_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.ack_)
  return static_cast< ::x3ware::WareMessage_Ack >(ack__);
}
 void WareMessage::set_ack_(::x3ware::WareMessage_Ack value) {
  
  ack__ = value;
  // @@protoc_insertion_point(field_set:x3ware.WareMessage.ack_)
}

// optional int32 error_code_ = 4;
void WareMessage::clear_error_code_() {
  error_code__ = 0;
}
 ::google::protobuf::int32 WareMessage::error_code_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.error_code_)
  return error_code__;
}
 void WareMessage::set_error_code_(::google::protobuf::int32 value) {
  
  error_code__ = value;
  // @@protoc_insertion_point(field_set:x3ware.WareMessage.error_code_)
}

// optional .x3ware.ModuleInfo info_ = 5;
bool WareMessage::has_info_() const {
  return !_is_default_instance_ && info__ != NULL;
}
void WareMessage::clear_info_() {
  if (GetArenaNoVirtual() == NULL && info__ != NULL) delete info__;
  info__ = NULL;
}
const ::x3ware::ModuleInfo& WareMessage::info_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.info_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info__ != NULL ? *info__ : *default_instance().info__;
#else
  return info__ != NULL ? *info__ : *default_instance_->info__;
#endif
}
::x3ware::ModuleInfo* WareMessage::mutable_info_() {
  
  if (info__ == NULL) {
    info__ = new ::x3ware::ModuleInfo;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.info_)
  return info__;
}
::x3ware::ModuleInfo* WareMessage::release_info_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.info_)
  
  ::x3ware::ModuleInfo* temp = info__;
  info__ = NULL;
  return temp;
}
void WareMessage::set_allocated_info_(::x3ware::ModuleInfo* info_) {
  delete info__;
  info__ = info_;
  if (info_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.info_)
}

// repeated .x3ware.Table table_ = 6;
int WareMessage::table__size() const {
  return table__.size();
}
void WareMessage::clear_table_() {
  table__.Clear();
}
const ::x3ware::Table& WareMessage::table_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.table_)
  return table__.Get(index);
}
::x3ware::Table* WareMessage::mutable_table_(int index) {
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.table_)
  return table__.Mutable(index);
}
::x3ware::Table* WareMessage::add_table_() {
  // @@protoc_insertion_point(field_add:x3ware.WareMessage.table_)
  return table__.Add();
}
::google::protobuf::RepeatedPtrField< ::x3ware::Table >*
WareMessage::mutable_table_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.WareMessage.table_)
  return &table__;
}
const ::google::protobuf::RepeatedPtrField< ::x3ware::Table >&
WareMessage::table_() const {
  // @@protoc_insertion_point(field_list:x3ware.WareMessage.table_)
  return table__;
}

// repeated .x3ware.Record record_ = 7;
int WareMessage::record__size() const {
  return record__.size();
}
void WareMessage::clear_record_() {
  record__.Clear();
}
const ::x3ware::Record& WareMessage::record_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.record_)
  return record__.Get(index);
}
::x3ware::Record* WareMessage::mutable_record_(int index) {
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.record_)
  return record__.Mutable(index);
}
::x3ware::Record* WareMessage::add_record_() {
  // @@protoc_insertion_point(field_add:x3ware.WareMessage.record_)
  return record__.Add();
}
::google::protobuf::RepeatedPtrField< ::x3ware::Record >*
WareMessage::mutable_record_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.WareMessage.record_)
  return &record__;
}
const ::google::protobuf::RepeatedPtrField< ::x3ware::Record >&
WareMessage::record_() const {
  // @@protoc_insertion_point(field_list:x3ware.WareMessage.record_)
  return record__;
}

// optional .x3ware.SearchParam search_param_ = 8;
bool WareMessage::has_search_param_() const {
  return !_is_default_instance_ && search_param__ != NULL;
}
void WareMessage::clear_search_param_() {
  if (GetArenaNoVirtual() == NULL && search_param__ != NULL) delete search_param__;
  search_param__ = NULL;
}
const ::x3ware::SearchParam& WareMessage::search_param_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.search_param_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return search_param__ != NULL ? *search_param__ : *default_instance().search_param__;
#else
  return search_param__ != NULL ? *search_param__ : *default_instance_->search_param__;
#endif
}
::x3ware::SearchParam* WareMessage::mutable_search_param_() {
  
  if (search_param__ == NULL) {
    search_param__ = new ::x3ware::SearchParam;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.search_param_)
  return search_param__;
}
::x3ware::SearchParam* WareMessage::release_search_param_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.search_param_)
  
  ::x3ware::SearchParam* temp = search_param__;
  search_param__ = NULL;
  return temp;
}
void WareMessage::set_allocated_search_param_(::x3ware::SearchParam* search_param_) {
  delete search_param__;
  search_param__ = search_param_;
  if (search_param_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.search_param_)
}

// optional .x3ware.SearchResult search_result_ = 9;
bool WareMessage::has_search_result_() const {
  return !_is_default_instance_ && search_result__ != NULL;
}
void WareMessage::clear_search_result_() {
  if (GetArenaNoVirtual() == NULL && search_result__ != NULL) delete search_result__;
  search_result__ = NULL;
}
const ::x3ware::SearchResult& WareMessage::search_result_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.search_result_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return search_result__ != NULL ? *search_result__ : *default_instance().search_result__;
#else
  return search_result__ != NULL ? *search_result__ : *default_instance_->search_result__;
#endif
}
::x3ware::SearchResult* WareMessage::mutable_search_result_() {
  
  if (search_result__ == NULL) {
    search_result__ = new ::x3ware::SearchResult;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.search_result_)
  return search_result__;
}
::x3ware::SearchResult* WareMessage::release_search_result_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.search_result_)
  
  ::x3ware::SearchResult* temp = search_result__;
  search_result__ = NULL;
  return temp;
}
void WareMessage::set_allocated_search_result_(::x3ware::SearchResult* search_result_) {
  delete search_result__;
  search_result__ = search_result_;
  if (search_result_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.search_result_)
}

// optional .x3ware.CompareParam compare_param_ = 10;
bool WareMessage::has_compare_param_() const {
  return !_is_default_instance_ && compare_param__ != NULL;
}
void WareMessage::clear_compare_param_() {
  if (GetArenaNoVirtual() == NULL && compare_param__ != NULL) delete compare_param__;
  compare_param__ = NULL;
}
const ::x3ware::CompareParam& WareMessage::compare_param_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.compare_param_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return compare_param__ != NULL ? *compare_param__ : *default_instance().compare_param__;
#else
  return compare_param__ != NULL ? *compare_param__ : *default_instance_->compare_param__;
#endif
}
::x3ware::CompareParam* WareMessage::mutable_compare_param_() {
  
  if (compare_param__ == NULL) {
    compare_param__ = new ::x3ware::CompareParam;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.compare_param_)
  return compare_param__;
}
::x3ware::CompareParam* WareMessage::release_compare_param_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.compare_param_)
  
  ::x3ware::CompareParam* temp = compare_param__;
  compare_param__ = NULL;
  return temp;
}
void WareMessage::set_allocated_compare_param_(::x3ware::CompareParam* compare_param_) {
  delete compare_param__;
  compare_param__ = compare_param_;
  if (compare_param_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.compare_param_)
}

// optional .x3ware.CompareResult compare_result_ = 11;
bool WareMessage::has_compare_result_() const {
  return !_is_default_instance_ && compare_result__ != NULL;
}
void WareMessage::clear_compare_result_() {
  if (GetArenaNoVirtual() == NULL && compare_result__ != NULL) delete compare_result__;
  compare_result__ = NULL;
}
const ::x3ware::CompareResult& WareMessage::compare_result_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.compare_result_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return compare_result__ != NULL ? *compare_result__ : *default_instance().compare_result__;
#else
  return compare_result__ != NULL ? *compare_result__ : *default_instance_->compare_result__;
#endif
}
::x3ware::CompareResult* WareMessage::mutable_compare_result_() {
  
  if (compare_result__ == NULL) {
    compare_result__ = new ::x3ware::CompareResult;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.compare_result_)
  return compare_result__;
}
::x3ware::CompareResult* WareMessage::release_compare_result_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.compare_result_)
  
  ::x3ware::CompareResult* temp = compare_result__;
  compare_result__ = NULL;
  return temp;
}
void WareMessage::set_allocated_compare_result_(::x3ware::CompareResult* compare_result_) {
  delete compare_result__;
  compare_result__ = compare_result_;
  if (compare_result_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.compare_result_)
}

// optional .x3ware.ModelVerCheck model_version_check_ = 12;
bool WareMessage::has_model_version_check_() const {
  return !_is_default_instance_ && model_version_check__ != NULL;
}
void WareMessage::clear_model_version_check_() {
  if (GetArenaNoVirtual() == NULL && model_version_check__ != NULL) delete model_version_check__;
  model_version_check__ = NULL;
}
const ::x3ware::ModelVerCheck& WareMessage::model_version_check_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.model_version_check_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return model_version_check__ != NULL ? *model_version_check__ : *default_instance().model_version_check__;
#else
  return model_version_check__ != NULL ? *model_version_check__ : *default_instance_->model_version_check__;
#endif
}
::x3ware::ModelVerCheck* WareMessage::mutable_model_version_check_() {
  
  if (model_version_check__ == NULL) {
    model_version_check__ = new ::x3ware::ModelVerCheck;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.model_version_check_)
  return model_version_check__;
}
::x3ware::ModelVerCheck* WareMessage::release_model_version_check_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.model_version_check_)
  
  ::x3ware::ModelVerCheck* temp = model_version_check__;
  model_version_check__ = NULL;
  return temp;
}
void WareMessage::set_allocated_model_version_check_(::x3ware::ModelVerCheck* model_version_check_) {
  delete model_version_check__;
  model_version_check__ = model_version_check_;
  if (model_version_check_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.model_version_check_)
}

// optional .x3ware.ListRecord list_record_ = 13;
bool WareMessage::has_list_record_() const {
  return !_is_default_instance_ && list_record__ != NULL;
}
void WareMessage::clear_list_record_() {
  if (GetArenaNoVirtual() == NULL && list_record__ != NULL) delete list_record__;
  list_record__ = NULL;
}
const ::x3ware::ListRecord& WareMessage::list_record_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.list_record_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return list_record__ != NULL ? *list_record__ : *default_instance().list_record__;
#else
  return list_record__ != NULL ? *list_record__ : *default_instance_->list_record__;
#endif
}
::x3ware::ListRecord* WareMessage::mutable_list_record_() {
  
  if (list_record__ == NULL) {
    list_record__ = new ::x3ware::ListRecord;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.list_record_)
  return list_record__;
}
::x3ware::ListRecord* WareMessage::release_list_record_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.list_record_)
  
  ::x3ware::ListRecord* temp = list_record__;
  list_record__ = NULL;
  return temp;
}
void WareMessage::set_allocated_list_record_(::x3ware::ListRecord* list_record_) {
  delete list_record__;
  list_record__ = list_record_;
  if (list_record_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.list_record_)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace x3ware

// @@protoc_insertion_point(global_scope)
