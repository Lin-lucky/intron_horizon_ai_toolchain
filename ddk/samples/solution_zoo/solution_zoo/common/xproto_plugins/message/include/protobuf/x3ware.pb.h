// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: x3ware.proto

#ifndef PROTOBUF_x3ware_2eproto__INCLUDED
#define PROTOBUF_x3ware_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace x3ware {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_x3ware_2eproto();
void protobuf_AssignDesc_x3ware_2eproto();
void protobuf_ShutdownFile_x3ware_2eproto();

class CompareParam;
class CompareResult;
class Feature;
class ListRecord;
class MatchResult;
class ModelVerCheck;
class ModuleInfo;
class Record;
class SearchParam;
class SearchResult;
class Table;
class WareMessage;

enum ModuleInfo_StoreType {
  ModuleInfo_StoreType_FILE = 0,
  ModuleInfo_StoreType_SQLITE = 1,
  ModuleInfo_StoreType_MONGODB = 2,
  ModuleInfo_StoreType_MEMORY = 3,
  ModuleInfo_StoreType_ModuleInfo_StoreType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ModuleInfo_StoreType_ModuleInfo_StoreType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ModuleInfo_StoreType_IsValid(int value);
const ModuleInfo_StoreType ModuleInfo_StoreType_StoreType_MIN = ModuleInfo_StoreType_FILE;
const ModuleInfo_StoreType ModuleInfo_StoreType_StoreType_MAX = ModuleInfo_StoreType_MEMORY;
const int ModuleInfo_StoreType_StoreType_ARRAYSIZE = ModuleInfo_StoreType_StoreType_MAX + 1;

enum WareMessage_Type {
  WareMessage_Type_Unknown = 0,
  WareMessage_Type_Init = 1,
  WareMessage_Type_DeInit = 2,
  WareMessage_Type_GetVersion = 3,
  WareMessage_Type_TableOper = 4,
  WareMessage_Type_RecordOper = 5,
  WareMessage_Type_FeatureOper = 6,
  WareMessage_Type_Search = 7,
  WareMessage_Type_Compare = 8,
  WareMessage_Type_CheckModelVersion = 9,
  WareMessage_Type_WareMessage_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WareMessage_Type_WareMessage_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WareMessage_Type_IsValid(int value);
const WareMessage_Type WareMessage_Type_Type_MIN = WareMessage_Type_Unknown;
const WareMessage_Type WareMessage_Type_Type_MAX = WareMessage_Type_CheckModelVersion;
const int WareMessage_Type_Type_ARRAYSIZE = WareMessage_Type_Type_MAX + 1;

enum WareMessage_Oper {
  WareMessage_Oper_Add = 0,
  WareMessage_Oper_Del = 1,
  WareMessage_Oper_Upd = 2,
  WareMessage_Oper_Query = 3,
  WareMessage_Oper_WareMessage_Oper_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WareMessage_Oper_WareMessage_Oper_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WareMessage_Oper_IsValid(int value);
const WareMessage_Oper WareMessage_Oper_Oper_MIN = WareMessage_Oper_Add;
const WareMessage_Oper WareMessage_Oper_Oper_MAX = WareMessage_Oper_Query;
const int WareMessage_Oper_Oper_ARRAYSIZE = WareMessage_Oper_Oper_MAX + 1;

enum WareMessage_Ack {
  WareMessage_Ack_Uknown = 0,
  WareMessage_Ack_Success = 1,
  WareMessage_Ack_Fail = 2,
  WareMessage_Ack_WareMessage_Ack_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WareMessage_Ack_WareMessage_Ack_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WareMessage_Ack_IsValid(int value);
const WareMessage_Ack WareMessage_Ack_Ack_MIN = WareMessage_Ack_Uknown;
const WareMessage_Ack WareMessage_Ack_Ack_MAX = WareMessage_Ack_Fail;
const int WareMessage_Ack_Ack_ARRAYSIZE = WareMessage_Ack_Ack_MAX + 1;

// ===================================================================

class ModuleInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x3ware.ModuleInfo) */ {
 public:
  ModuleInfo();
  virtual ~ModuleInfo();

  ModuleInfo(const ModuleInfo& from);

  inline ModuleInfo& operator=(const ModuleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ModuleInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ModuleInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ModuleInfo* other);

  // implements Message ----------------------------------------------

  inline ModuleInfo* New() const { return New(NULL); }

  ModuleInfo* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ModuleInfo& from);
  void MergeFrom(const ModuleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModuleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ModuleInfo_StoreType StoreType;
  static const StoreType FILE =
    ModuleInfo_StoreType_FILE;
  static const StoreType SQLITE =
    ModuleInfo_StoreType_SQLITE;
  static const StoreType MONGODB =
    ModuleInfo_StoreType_MONGODB;
  static const StoreType MEMORY =
    ModuleInfo_StoreType_MEMORY;
  static inline bool StoreType_IsValid(int value) {
    return ModuleInfo_StoreType_IsValid(value);
  }
  static const StoreType StoreType_MIN =
    ModuleInfo_StoreType_StoreType_MIN;
  static const StoreType StoreType_MAX =
    ModuleInfo_StoreType_StoreType_MAX;
  static const int StoreType_ARRAYSIZE =
    ModuleInfo_StoreType_StoreType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .x3ware.ModuleInfo.StoreType store_type_ = 1;
  void clear_store_type_();
  static const int kStoreTypeFieldNumber = 1;
  ::x3ware::ModuleInfo_StoreType store_type_() const;
  void set_store_type_(::x3ware::ModuleInfo_StoreType value);

  // optional string db_dir_ = 2;
  void clear_db_dir_();
  static const int kDbDirFieldNumber = 2;
  const ::std::string& db_dir_() const;
  void set_db_dir_(const ::std::string& value);
  void set_db_dir_(const char* value);
  void set_db_dir_(const char* value, size_t size);
  ::std::string* mutable_db_dir_();
  ::std::string* release_db_dir_();
  void set_allocated_db_dir_(::std::string* db_dir_);

  // optional string version_ = 3;
  void clear_version_();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version_() const;
  void set_version_(const ::std::string& value);
  void set_version_(const char* value);
  void set_version_(const char* value, size_t size);
  ::std::string* mutable_version_();
  ::std::string* release_version_();
  void set_allocated_version_(::std::string* version_);

  // @@protoc_insertion_point(class_scope:x3ware.ModuleInfo)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr db_dir__;
  ::google::protobuf::internal::ArenaStringPtr version__;
  int store_type__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_x3ware_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_x3ware_2eproto();
  #endif
  friend void protobuf_AssignDesc_x3ware_2eproto();
  friend void protobuf_ShutdownFile_x3ware_2eproto();

  void InitAsDefaultInstance();
  static ModuleInfo* default_instance_;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x3ware.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }

  static const Table& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Table* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Table* other);

  // implements Message ----------------------------------------------

  inline Table* New() const { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name_ = 1;
  void clear_name_();
  static const int kNameFieldNumber = 1;
  const ::std::string& name_() const;
  void set_name_(const ::std::string& value);
  void set_name_(const char* value);
  void set_name_(const char* value, size_t size);
  ::std::string* mutable_name_();
  ::std::string* release_name_();
  void set_allocated_name_(::std::string* name_);

  // optional string model_version_ = 2;
  void clear_model_version_();
  static const int kModelVersionFieldNumber = 2;
  const ::std::string& model_version_() const;
  void set_model_version_(const ::std::string& value);
  void set_model_version_(const char* value);
  void set_model_version_(const char* value, size_t size);
  ::std::string* mutable_model_version_();
  ::std::string* release_model_version_();
  void set_allocated_model_version_(::std::string* model_version_);

  // optional int32 attr_check_ = 3;
  void clear_attr_check_();
  static const int kAttrCheckFieldNumber = 3;
  ::google::protobuf::int32 attr_check_() const;
  void set_attr_check_(::google::protobuf::int32 value);

  // optional int32 feature_size_ = 4;
  void clear_feature_size_();
  static const int kFeatureSizeFieldNumber = 4;
  ::google::protobuf::int32 feature_size_() const;
  void set_feature_size_(::google::protobuf::int32 value);

  // optional float distance_thr_ = 5;
  void clear_distance_thr_();
  static const int kDistanceThrFieldNumber = 5;
  float distance_thr_() const;
  void set_distance_thr_(float value);

  // optional float similar_thr_ = 6;
  void clear_similar_thr_();
  static const int kSimilarThrFieldNumber = 6;
  float similar_thr_() const;
  void set_similar_thr_(float value);

  // optional string db_dir_ = 7;
  void clear_db_dir_();
  static const int kDbDirFieldNumber = 7;
  const ::std::string& db_dir_() const;
  void set_db_dir_(const ::std::string& value);
  void set_db_dir_(const char* value);
  void set_db_dir_(const char* value, size_t size);
  ::std::string* mutable_db_dir_();
  ::std::string* release_db_dir_();
  void set_allocated_db_dir_(::std::string* db_dir_);

  // @@protoc_insertion_point(class_scope:x3ware.Table)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name__;
  ::google::protobuf::internal::ArenaStringPtr model_version__;
  ::google::protobuf::int32 attr_check__;
  ::google::protobuf::int32 feature_size__;
  float distance_thr__;
  float similar_thr__;
  ::google::protobuf::internal::ArenaStringPtr db_dir__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_x3ware_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_x3ware_2eproto();
  #endif
  friend void protobuf_AssignDesc_x3ware_2eproto();
  friend void protobuf_ShutdownFile_x3ware_2eproto();

  void InitAsDefaultInstance();
  static Table* default_instance_;
};
// -------------------------------------------------------------------

class Feature : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x3ware.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }

  static const Feature& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Feature* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Feature* other);

  // implements Message ----------------------------------------------

  inline Feature* New() const { return New(NULL); }

  Feature* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Feature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri_ = 1;
  void clear_uri_();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri_() const;
  void set_uri_(const ::std::string& value);
  void set_uri_(const char* value);
  void set_uri_(const char* value, size_t size);
  ::std::string* mutable_uri_();
  ::std::string* release_uri_();
  void set_allocated_uri_(::std::string* uri_);

  // optional int32 attr_ = 2;
  void clear_attr_();
  static const int kAttrFieldNumber = 2;
  ::google::protobuf::int32 attr_() const;
  void set_attr_(::google::protobuf::int32 value);

  // optional int32 size_ = 3;
  void clear_size_();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int32 size_() const;
  void set_size_(::google::protobuf::int32 value);

  // repeated float feature_f_ = 4;
  int feature_f__size() const;
  void clear_feature_f_();
  static const int kFeatureFFieldNumber = 4;
  float feature_f_(int index) const;
  void set_feature_f_(int index, float value);
  void add_feature_f_(float value);
  const ::google::protobuf::RepeatedField< float >&
      feature_f_() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_feature_f_();

  // repeated int32 feature_i_ = 5;
  int feature_i__size() const;
  void clear_feature_i_();
  static const int kFeatureIFieldNumber = 5;
  ::google::protobuf::int32 feature_i_(int index) const;
  void set_feature_i_(int index, ::google::protobuf::int32 value);
  void add_feature_i_(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      feature_i_() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_feature_i_();

  // @@protoc_insertion_point(class_scope:x3ware.Feature)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uri__;
  ::google::protobuf::int32 attr__;
  ::google::protobuf::int32 size__;
  ::google::protobuf::RepeatedField< float > feature_f__;
  mutable int _feature_f__cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > feature_i__;
  mutable int _feature_i__cached_byte_size_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_x3ware_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_x3ware_2eproto();
  #endif
  friend void protobuf_AssignDesc_x3ware_2eproto();
  friend void protobuf_ShutdownFile_x3ware_2eproto();

  void InitAsDefaultInstance();
  static Feature* default_instance_;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x3ware.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }

  static const Record& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Record* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Record* other);

  // implements Message ----------------------------------------------

  inline Record* New() const { return New(NULL); }

  Record* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id_ = 1;
  void clear_id_();
  static const int kIdFieldNumber = 1;
  const ::std::string& id_() const;
  void set_id_(const ::std::string& value);
  void set_id_(const char* value);
  void set_id_(const char* value, size_t size);
  ::std::string* mutable_id_();
  ::std::string* release_id_();
  void set_allocated_id_(::std::string* id_);

  // optional int32 num_ = 2;
  void clear_num_();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num_() const;
  void set_num_(::google::protobuf::int32 value);

  // repeated .x3ware.Feature features_ = 3;
  int features__size() const;
  void clear_features_();
  static const int kFeaturesFieldNumber = 3;
  const ::x3ware::Feature& features_(int index) const;
  ::x3ware::Feature* mutable_features_(int index);
  ::x3ware::Feature* add_features_();
  ::google::protobuf::RepeatedPtrField< ::x3ware::Feature >*
      mutable_features_();
  const ::google::protobuf::RepeatedPtrField< ::x3ware::Feature >&
      features_() const;

  // @@protoc_insertion_point(class_scope:x3ware.Record)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id__;
  ::google::protobuf::RepeatedPtrField< ::x3ware::Feature > features__;
  ::google::protobuf::int32 num__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_x3ware_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_x3ware_2eproto();
  #endif
  friend void protobuf_AssignDesc_x3ware_2eproto();
  friend void protobuf_ShutdownFile_x3ware_2eproto();

  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// -------------------------------------------------------------------

class ListRecord : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x3ware.ListRecord) */ {
 public:
  ListRecord();
  virtual ~ListRecord();

  ListRecord(const ListRecord& from);

  inline ListRecord& operator=(const ListRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ListRecord& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ListRecord* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ListRecord* other);

  // implements Message ----------------------------------------------

  inline ListRecord* New() const { return New(NULL); }

  ListRecord* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ListRecord& from);
  void MergeFrom(const ListRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 seq_id_ = 1;
  void clear_seq_id_();
  static const int kSeqIdFieldNumber = 1;
  ::google::protobuf::int32 seq_id_() const;
  void set_seq_id_(::google::protobuf::int32 value);

  // optional int32 seq_num_ = 2;
  void clear_seq_num_();
  static const int kSeqNumFieldNumber = 2;
  ::google::protobuf::int32 seq_num_() const;
  void set_seq_num_(::google::protobuf::int32 value);

  // repeated .x3ware.Record record_ = 3;
  int record__size() const;
  void clear_record_();
  static const int kRecordFieldNumber = 3;
  const ::x3ware::Record& record_(int index) const;
  ::x3ware::Record* mutable_record_(int index);
  ::x3ware::Record* add_record_();
  ::google::protobuf::RepeatedPtrField< ::x3ware::Record >*
      mutable_record_();
  const ::google::protobuf::RepeatedPtrField< ::x3ware::Record >&
      record_() const;

  // @@protoc_insertion_point(class_scope:x3ware.ListRecord)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int32 seq_id__;
  ::google::protobuf::int32 seq_num__;
  ::google::protobuf::RepeatedPtrField< ::x3ware::Record > record__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_x3ware_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_x3ware_2eproto();
  #endif
  friend void protobuf_AssignDesc_x3ware_2eproto();
  friend void protobuf_ShutdownFile_x3ware_2eproto();

  void InitAsDefaultInstance();
  static ListRecord* default_instance_;
};
// -------------------------------------------------------------------

class SearchParam : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x3ware.SearchParam) */ {
 public:
  SearchParam();
  virtual ~SearchParam();

  SearchParam(const SearchParam& from);

  inline SearchParam& operator=(const SearchParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const SearchParam& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SearchParam* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SearchParam* other);

  // implements Message ----------------------------------------------

  inline SearchParam* New() const { return New(NULL); }

  SearchParam* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SearchParam& from);
  void MergeFrom(const SearchParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 top_num_ = 1;
  void clear_top_num_();
  static const int kTopNumFieldNumber = 1;
  ::google::protobuf::int32 top_num_() const;
  void set_top_num_(::google::protobuf::int32 value);

  // optional float distance_thr_ = 2;
  void clear_distance_thr_();
  static const int kDistanceThrFieldNumber = 2;
  float distance_thr_() const;
  void set_distance_thr_(float value);

  // optional float similar_thr_ = 3;
  void clear_similar_thr_();
  static const int kSimilarThrFieldNumber = 3;
  float similar_thr_() const;
  void set_similar_thr_(float value);

  // optional int32 num_ = 4;
  void clear_num_();
  static const int kNumFieldNumber = 4;
  ::google::protobuf::int32 num_() const;
  void set_num_(::google::protobuf::int32 value);

  // repeated .x3ware.Feature features_ = 5;
  int features__size() const;
  void clear_features_();
  static const int kFeaturesFieldNumber = 5;
  const ::x3ware::Feature& features_(int index) const;
  ::x3ware::Feature* mutable_features_(int index);
  ::x3ware::Feature* add_features_();
  ::google::protobuf::RepeatedPtrField< ::x3ware::Feature >*
      mutable_features_();
  const ::google::protobuf::RepeatedPtrField< ::x3ware::Feature >&
      features_() const;

  // @@protoc_insertion_point(class_scope:x3ware.SearchParam)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int32 top_num__;
  float distance_thr__;
  float similar_thr__;
  ::google::protobuf::int32 num__;
  ::google::protobuf::RepeatedPtrField< ::x3ware::Feature > features__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_x3ware_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_x3ware_2eproto();
  #endif
  friend void protobuf_AssignDesc_x3ware_2eproto();
  friend void protobuf_ShutdownFile_x3ware_2eproto();

  void InitAsDefaultInstance();
  static SearchParam* default_instance_;
};
// -------------------------------------------------------------------

class MatchResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x3ware.MatchResult) */ {
 public:
  MatchResult();
  virtual ~MatchResult();

  MatchResult(const MatchResult& from);

  inline MatchResult& operator=(const MatchResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const MatchResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MatchResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MatchResult* other);

  // implements Message ----------------------------------------------

  inline MatchResult* New() const { return New(NULL); }

  MatchResult* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MatchResult& from);
  void MergeFrom(const MatchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id_ = 1;
  void clear_id_();
  static const int kIdFieldNumber = 1;
  const ::std::string& id_() const;
  void set_id_(const ::std::string& value);
  void set_id_(const char* value);
  void set_id_(const char* value, size_t size);
  ::std::string* mutable_id_();
  ::std::string* release_id_();
  void set_allocated_id_(::std::string* id_);

  // optional float distance_ = 2;
  void clear_distance_();
  static const int kDistanceFieldNumber = 2;
  float distance_() const;
  void set_distance_(float value);

  // optional float similar_ = 3;
  void clear_similar_();
  static const int kSimilarFieldNumber = 3;
  float similar_() const;
  void set_similar_(float value);

  // @@protoc_insertion_point(class_scope:x3ware.MatchResult)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id__;
  float distance__;
  float similar__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_x3ware_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_x3ware_2eproto();
  #endif
  friend void protobuf_AssignDesc_x3ware_2eproto();
  friend void protobuf_ShutdownFile_x3ware_2eproto();

  void InitAsDefaultInstance();
  static MatchResult* default_instance_;
};
// -------------------------------------------------------------------

class SearchResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x3ware.SearchResult) */ {
 public:
  SearchResult();
  virtual ~SearchResult();

  SearchResult(const SearchResult& from);

  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const SearchResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SearchResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SearchResult* other);

  // implements Message ----------------------------------------------

  inline SearchResult* New() const { return New(NULL); }

  SearchResult* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SearchResult& from);
  void MergeFrom(const SearchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SearchResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool match_ = 1;
  void clear_match_();
  static const int kMatchFieldNumber = 1;
  bool match_() const;
  void set_match_(bool value);

  // optional int32 num_ = 2;
  void clear_num_();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num_() const;
  void set_num_(::google::protobuf::int32 value);

  // repeated .x3ware.MatchResult match_result_ = 3;
  int match_result__size() const;
  void clear_match_result_();
  static const int kMatchResultFieldNumber = 3;
  const ::x3ware::MatchResult& match_result_(int index) const;
  ::x3ware::MatchResult* mutable_match_result_(int index);
  ::x3ware::MatchResult* add_match_result_();
  ::google::protobuf::RepeatedPtrField< ::x3ware::MatchResult >*
      mutable_match_result_();
  const ::google::protobuf::RepeatedPtrField< ::x3ware::MatchResult >&
      match_result_() const;

  // @@protoc_insertion_point(class_scope:x3ware.SearchResult)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  bool match__;
  ::google::protobuf::int32 num__;
  ::google::protobuf::RepeatedPtrField< ::x3ware::MatchResult > match_result__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_x3ware_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_x3ware_2eproto();
  #endif
  friend void protobuf_AssignDesc_x3ware_2eproto();
  friend void protobuf_ShutdownFile_x3ware_2eproto();

  void InitAsDefaultInstance();
  static SearchResult* default_instance_;
};
// -------------------------------------------------------------------

class CompareParam : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x3ware.CompareParam) */ {
 public:
  CompareParam();
  virtual ~CompareParam();

  CompareParam(const CompareParam& from);

  inline CompareParam& operator=(const CompareParam& from) {
    CopyFrom(from);
    return *this;
  }

  static const CompareParam& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CompareParam* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CompareParam* other);

  // implements Message ----------------------------------------------

  inline CompareParam* New() const { return New(NULL); }

  CompareParam* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CompareParam& from);
  void MergeFrom(const CompareParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CompareParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float distance_thr_ = 1;
  void clear_distance_thr_();
  static const int kDistanceThrFieldNumber = 1;
  float distance_thr_() const;
  void set_distance_thr_(float value);

  // optional float similar_thr_ = 2;
  void clear_similar_thr_();
  static const int kSimilarThrFieldNumber = 2;
  float similar_thr_() const;
  void set_similar_thr_(float value);

  // @@protoc_insertion_point(class_scope:x3ware.CompareParam)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  float distance_thr__;
  float similar_thr__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_x3ware_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_x3ware_2eproto();
  #endif
  friend void protobuf_AssignDesc_x3ware_2eproto();
  friend void protobuf_ShutdownFile_x3ware_2eproto();

  void InitAsDefaultInstance();
  static CompareParam* default_instance_;
};
// -------------------------------------------------------------------

class CompareResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x3ware.CompareResult) */ {
 public:
  CompareResult();
  virtual ~CompareResult();

  CompareResult(const CompareResult& from);

  inline CompareResult& operator=(const CompareResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const CompareResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CompareResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CompareResult* other);

  // implements Message ----------------------------------------------

  inline CompareResult* New() const { return New(NULL); }

  CompareResult* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CompareResult& from);
  void MergeFrom(const CompareResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CompareResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool match_ = 1;
  void clear_match_();
  static const int kMatchFieldNumber = 1;
  bool match_() const;
  void set_match_(bool value);

  // optional float distance_ = 2;
  void clear_distance_();
  static const int kDistanceFieldNumber = 2;
  float distance_() const;
  void set_distance_(float value);

  // optional float similar_ = 3;
  void clear_similar_();
  static const int kSimilarFieldNumber = 3;
  float similar_() const;
  void set_similar_(float value);

  // @@protoc_insertion_point(class_scope:x3ware.CompareResult)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  bool match__;
  float distance__;
  float similar__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_x3ware_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_x3ware_2eproto();
  #endif
  friend void protobuf_AssignDesc_x3ware_2eproto();
  friend void protobuf_ShutdownFile_x3ware_2eproto();

  void InitAsDefaultInstance();
  static CompareResult* default_instance_;
};
// -------------------------------------------------------------------

class ModelVerCheck : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x3ware.ModelVerCheck) */ {
 public:
  ModelVerCheck();
  virtual ~ModelVerCheck();

  ModelVerCheck(const ModelVerCheck& from);

  inline ModelVerCheck& operator=(const ModelVerCheck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ModelVerCheck& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ModelVerCheck* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ModelVerCheck* other);

  // implements Message ----------------------------------------------

  inline ModelVerCheck* New() const { return New(NULL); }

  ModelVerCheck* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ModelVerCheck& from);
  void MergeFrom(const ModelVerCheck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelVerCheck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string current_version_ = 1;
  void clear_current_version_();
  static const int kCurrentVersionFieldNumber = 1;
  const ::std::string& current_version_() const;
  void set_current_version_(const ::std::string& value);
  void set_current_version_(const char* value);
  void set_current_version_(const char* value, size_t size);
  ::std::string* mutable_current_version_();
  ::std::string* release_current_version_();
  void set_allocated_current_version_(::std::string* current_version_);

  // optional string last_version_ = 2;
  void clear_last_version_();
  static const int kLastVersionFieldNumber = 2;
  const ::std::string& last_version_() const;
  void set_last_version_(const ::std::string& value);
  void set_last_version_(const char* value);
  void set_last_version_(const char* value, size_t size);
  ::std::string* mutable_last_version_();
  ::std::string* release_last_version_();
  void set_allocated_last_version_(::std::string* last_version_);

  // optional bool need_update_ = 3;
  void clear_need_update_();
  static const int kNeedUpdateFieldNumber = 3;
  bool need_update_() const;
  void set_need_update_(bool value);

  // @@protoc_insertion_point(class_scope:x3ware.ModelVerCheck)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr current_version__;
  ::google::protobuf::internal::ArenaStringPtr last_version__;
  bool need_update__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_x3ware_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_x3ware_2eproto();
  #endif
  friend void protobuf_AssignDesc_x3ware_2eproto();
  friend void protobuf_ShutdownFile_x3ware_2eproto();

  void InitAsDefaultInstance();
  static ModelVerCheck* default_instance_;
};
// -------------------------------------------------------------------

class WareMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:x3ware.WareMessage) */ {
 public:
  WareMessage();
  virtual ~WareMessage();

  WareMessage(const WareMessage& from);

  inline WareMessage& operator=(const WareMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const WareMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const WareMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(WareMessage* other);

  // implements Message ----------------------------------------------

  inline WareMessage* New() const { return New(NULL); }

  WareMessage* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const WareMessage& from);
  void MergeFrom(const WareMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WareMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef WareMessage_Type Type;
  static const Type Unknown =
    WareMessage_Type_Unknown;
  static const Type Init =
    WareMessage_Type_Init;
  static const Type DeInit =
    WareMessage_Type_DeInit;
  static const Type GetVersion =
    WareMessage_Type_GetVersion;
  static const Type TableOper =
    WareMessage_Type_TableOper;
  static const Type RecordOper =
    WareMessage_Type_RecordOper;
  static const Type FeatureOper =
    WareMessage_Type_FeatureOper;
  static const Type Search =
    WareMessage_Type_Search;
  static const Type Compare =
    WareMessage_Type_Compare;
  static const Type CheckModelVersion =
    WareMessage_Type_CheckModelVersion;
  static inline bool Type_IsValid(int value) {
    return WareMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    WareMessage_Type_Type_MIN;
  static const Type Type_MAX =
    WareMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    WareMessage_Type_Type_ARRAYSIZE;

  typedef WareMessage_Oper Oper;
  static const Oper Add =
    WareMessage_Oper_Add;
  static const Oper Del =
    WareMessage_Oper_Del;
  static const Oper Upd =
    WareMessage_Oper_Upd;
  static const Oper Query =
    WareMessage_Oper_Query;
  static inline bool Oper_IsValid(int value) {
    return WareMessage_Oper_IsValid(value);
  }
  static const Oper Oper_MIN =
    WareMessage_Oper_Oper_MIN;
  static const Oper Oper_MAX =
    WareMessage_Oper_Oper_MAX;
  static const int Oper_ARRAYSIZE =
    WareMessage_Oper_Oper_ARRAYSIZE;

  typedef WareMessage_Ack Ack;
  static const Ack Uknown =
    WareMessage_Ack_Uknown;
  static const Ack Success =
    WareMessage_Ack_Success;
  static const Ack Fail =
    WareMessage_Ack_Fail;
  static inline bool Ack_IsValid(int value) {
    return WareMessage_Ack_IsValid(value);
  }
  static const Ack Ack_MIN =
    WareMessage_Ack_Ack_MIN;
  static const Ack Ack_MAX =
    WareMessage_Ack_Ack_MAX;
  static const int Ack_ARRAYSIZE =
    WareMessage_Ack_Ack_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .x3ware.WareMessage.Type type_ = 1;
  void clear_type_();
  static const int kTypeFieldNumber = 1;
  ::x3ware::WareMessage_Type type_() const;
  void set_type_(::x3ware::WareMessage_Type value);

  // optional .x3ware.WareMessage.Oper oper_ = 2;
  void clear_oper_();
  static const int kOperFieldNumber = 2;
  ::x3ware::WareMessage_Oper oper_() const;
  void set_oper_(::x3ware::WareMessage_Oper value);

  // optional .x3ware.WareMessage.Ack ack_ = 3;
  void clear_ack_();
  static const int kAckFieldNumber = 3;
  ::x3ware::WareMessage_Ack ack_() const;
  void set_ack_(::x3ware::WareMessage_Ack value);

  // optional int32 error_code_ = 4;
  void clear_error_code_();
  static const int kErrorCodeFieldNumber = 4;
  ::google::protobuf::int32 error_code_() const;
  void set_error_code_(::google::protobuf::int32 value);

  // optional .x3ware.ModuleInfo info_ = 5;
  bool has_info_() const;
  void clear_info_();
  static const int kInfoFieldNumber = 5;
  const ::x3ware::ModuleInfo& info_() const;
  ::x3ware::ModuleInfo* mutable_info_();
  ::x3ware::ModuleInfo* release_info_();
  void set_allocated_info_(::x3ware::ModuleInfo* info_);

  // repeated .x3ware.Table table_ = 6;
  int table__size() const;
  void clear_table_();
  static const int kTableFieldNumber = 6;
  const ::x3ware::Table& table_(int index) const;
  ::x3ware::Table* mutable_table_(int index);
  ::x3ware::Table* add_table_();
  ::google::protobuf::RepeatedPtrField< ::x3ware::Table >*
      mutable_table_();
  const ::google::protobuf::RepeatedPtrField< ::x3ware::Table >&
      table_() const;

  // repeated .x3ware.Record record_ = 7;
  int record__size() const;
  void clear_record_();
  static const int kRecordFieldNumber = 7;
  const ::x3ware::Record& record_(int index) const;
  ::x3ware::Record* mutable_record_(int index);
  ::x3ware::Record* add_record_();
  ::google::protobuf::RepeatedPtrField< ::x3ware::Record >*
      mutable_record_();
  const ::google::protobuf::RepeatedPtrField< ::x3ware::Record >&
      record_() const;

  // optional .x3ware.SearchParam search_param_ = 8;
  bool has_search_param_() const;
  void clear_search_param_();
  static const int kSearchParamFieldNumber = 8;
  const ::x3ware::SearchParam& search_param_() const;
  ::x3ware::SearchParam* mutable_search_param_();
  ::x3ware::SearchParam* release_search_param_();
  void set_allocated_search_param_(::x3ware::SearchParam* search_param_);

  // optional .x3ware.SearchResult search_result_ = 9;
  bool has_search_result_() const;
  void clear_search_result_();
  static const int kSearchResultFieldNumber = 9;
  const ::x3ware::SearchResult& search_result_() const;
  ::x3ware::SearchResult* mutable_search_result_();
  ::x3ware::SearchResult* release_search_result_();
  void set_allocated_search_result_(::x3ware::SearchResult* search_result_);

  // optional .x3ware.CompareParam compare_param_ = 10;
  bool has_compare_param_() const;
  void clear_compare_param_();
  static const int kCompareParamFieldNumber = 10;
  const ::x3ware::CompareParam& compare_param_() const;
  ::x3ware::CompareParam* mutable_compare_param_();
  ::x3ware::CompareParam* release_compare_param_();
  void set_allocated_compare_param_(::x3ware::CompareParam* compare_param_);

  // optional .x3ware.CompareResult compare_result_ = 11;
  bool has_compare_result_() const;
  void clear_compare_result_();
  static const int kCompareResultFieldNumber = 11;
  const ::x3ware::CompareResult& compare_result_() const;
  ::x3ware::CompareResult* mutable_compare_result_();
  ::x3ware::CompareResult* release_compare_result_();
  void set_allocated_compare_result_(::x3ware::CompareResult* compare_result_);

  // optional .x3ware.ModelVerCheck model_version_check_ = 12;
  bool has_model_version_check_() const;
  void clear_model_version_check_();
  static const int kModelVersionCheckFieldNumber = 12;
  const ::x3ware::ModelVerCheck& model_version_check_() const;
  ::x3ware::ModelVerCheck* mutable_model_version_check_();
  ::x3ware::ModelVerCheck* release_model_version_check_();
  void set_allocated_model_version_check_(::x3ware::ModelVerCheck* model_version_check_);

  // optional .x3ware.ListRecord list_record_ = 13;
  bool has_list_record_() const;
  void clear_list_record_();
  static const int kListRecordFieldNumber = 13;
  const ::x3ware::ListRecord& list_record_() const;
  ::x3ware::ListRecord* mutable_list_record_();
  ::x3ware::ListRecord* release_list_record_();
  void set_allocated_list_record_(::x3ware::ListRecord* list_record_);

  // @@protoc_insertion_point(class_scope:x3ware.WareMessage)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  int type__;
  int oper__;
  int ack__;
  ::google::protobuf::int32 error_code__;
  ::x3ware::ModuleInfo* info__;
  ::google::protobuf::RepeatedPtrField< ::x3ware::Table > table__;
  ::google::protobuf::RepeatedPtrField< ::x3ware::Record > record__;
  ::x3ware::SearchParam* search_param__;
  ::x3ware::SearchResult* search_result__;
  ::x3ware::CompareParam* compare_param__;
  ::x3ware::CompareResult* compare_result__;
  ::x3ware::ModelVerCheck* model_version_check__;
  ::x3ware::ListRecord* list_record__;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_x3ware_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_x3ware_2eproto();
  #endif
  friend void protobuf_AssignDesc_x3ware_2eproto();
  friend void protobuf_ShutdownFile_x3ware_2eproto();

  void InitAsDefaultInstance();
  static WareMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ModuleInfo

// optional .x3ware.ModuleInfo.StoreType store_type_ = 1;
inline void ModuleInfo::clear_store_type_() {
  store_type__ = 0;
}
inline ::x3ware::ModuleInfo_StoreType ModuleInfo::store_type_() const {
  // @@protoc_insertion_point(field_get:x3ware.ModuleInfo.store_type_)
  return static_cast< ::x3ware::ModuleInfo_StoreType >(store_type__);
}
inline void ModuleInfo::set_store_type_(::x3ware::ModuleInfo_StoreType value) {
  
  store_type__ = value;
  // @@protoc_insertion_point(field_set:x3ware.ModuleInfo.store_type_)
}

// optional string db_dir_ = 2;
inline void ModuleInfo::clear_db_dir_() {
  db_dir__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModuleInfo::db_dir_() const {
  // @@protoc_insertion_point(field_get:x3ware.ModuleInfo.db_dir_)
  return db_dir__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleInfo::set_db_dir_(const ::std::string& value) {
  
  db_dir__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.ModuleInfo.db_dir_)
}
inline void ModuleInfo::set_db_dir_(const char* value) {
  
  db_dir__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.ModuleInfo.db_dir_)
}
inline void ModuleInfo::set_db_dir_(const char* value, size_t size) {
  
  db_dir__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.ModuleInfo.db_dir_)
}
inline ::std::string* ModuleInfo::mutable_db_dir_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.ModuleInfo.db_dir_)
  return db_dir__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModuleInfo::release_db_dir_() {
  // @@protoc_insertion_point(field_release:x3ware.ModuleInfo.db_dir_)
  
  return db_dir__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleInfo::set_allocated_db_dir_(::std::string* db_dir_) {
  if (db_dir_ != NULL) {
    
  } else {
    
  }
  db_dir__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_dir_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.ModuleInfo.db_dir_)
}

// optional string version_ = 3;
inline void ModuleInfo::clear_version_() {
  version__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModuleInfo::version_() const {
  // @@protoc_insertion_point(field_get:x3ware.ModuleInfo.version_)
  return version__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleInfo::set_version_(const ::std::string& value) {
  
  version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.ModuleInfo.version_)
}
inline void ModuleInfo::set_version_(const char* value) {
  
  version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.ModuleInfo.version_)
}
inline void ModuleInfo::set_version_(const char* value, size_t size) {
  
  version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.ModuleInfo.version_)
}
inline ::std::string* ModuleInfo::mutable_version_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.ModuleInfo.version_)
  return version__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModuleInfo::release_version_() {
  // @@protoc_insertion_point(field_release:x3ware.ModuleInfo.version_)
  
  return version__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleInfo::set_allocated_version_(::std::string* version_) {
  if (version_ != NULL) {
    
  } else {
    
  }
  version__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.ModuleInfo.version_)
}

// -------------------------------------------------------------------

// Table

// optional string name_ = 1;
inline void Table::clear_name_() {
  name__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::name_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.name_)
  return name__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_name_(const ::std::string& value) {
  
  name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.Table.name_)
}
inline void Table::set_name_(const char* value) {
  
  name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.Table.name_)
}
inline void Table::set_name_(const char* value, size_t size) {
  
  name__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.Table.name_)
}
inline ::std::string* Table::mutable_name_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.Table.name_)
  return name__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_name_() {
  // @@protoc_insertion_point(field_release:x3ware.Table.name_)
  
  return name__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_name_(::std::string* name_) {
  if (name_ != NULL) {
    
  } else {
    
  }
  name__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.Table.name_)
}

// optional string model_version_ = 2;
inline void Table::clear_model_version_() {
  model_version__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::model_version_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.model_version_)
  return model_version__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_model_version_(const ::std::string& value) {
  
  model_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.Table.model_version_)
}
inline void Table::set_model_version_(const char* value) {
  
  model_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.Table.model_version_)
}
inline void Table::set_model_version_(const char* value, size_t size) {
  
  model_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.Table.model_version_)
}
inline ::std::string* Table::mutable_model_version_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.Table.model_version_)
  return model_version__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_model_version_() {
  // @@protoc_insertion_point(field_release:x3ware.Table.model_version_)
  
  return model_version__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_model_version_(::std::string* model_version_) {
  if (model_version_ != NULL) {
    
  } else {
    
  }
  model_version__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_version_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.Table.model_version_)
}

// optional int32 attr_check_ = 3;
inline void Table::clear_attr_check_() {
  attr_check__ = 0;
}
inline ::google::protobuf::int32 Table::attr_check_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.attr_check_)
  return attr_check__;
}
inline void Table::set_attr_check_(::google::protobuf::int32 value) {
  
  attr_check__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Table.attr_check_)
}

// optional int32 feature_size_ = 4;
inline void Table::clear_feature_size_() {
  feature_size__ = 0;
}
inline ::google::protobuf::int32 Table::feature_size_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.feature_size_)
  return feature_size__;
}
inline void Table::set_feature_size_(::google::protobuf::int32 value) {
  
  feature_size__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Table.feature_size_)
}

// optional float distance_thr_ = 5;
inline void Table::clear_distance_thr_() {
  distance_thr__ = 0;
}
inline float Table::distance_thr_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.distance_thr_)
  return distance_thr__;
}
inline void Table::set_distance_thr_(float value) {
  
  distance_thr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Table.distance_thr_)
}

// optional float similar_thr_ = 6;
inline void Table::clear_similar_thr_() {
  similar_thr__ = 0;
}
inline float Table::similar_thr_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.similar_thr_)
  return similar_thr__;
}
inline void Table::set_similar_thr_(float value) {
  
  similar_thr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Table.similar_thr_)
}

// optional string db_dir_ = 7;
inline void Table::clear_db_dir_() {
  db_dir__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::db_dir_() const {
  // @@protoc_insertion_point(field_get:x3ware.Table.db_dir_)
  return db_dir__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_db_dir_(const ::std::string& value) {
  
  db_dir__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.Table.db_dir_)
}
inline void Table::set_db_dir_(const char* value) {
  
  db_dir__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.Table.db_dir_)
}
inline void Table::set_db_dir_(const char* value, size_t size) {
  
  db_dir__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.Table.db_dir_)
}
inline ::std::string* Table::mutable_db_dir_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.Table.db_dir_)
  return db_dir__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_db_dir_() {
  // @@protoc_insertion_point(field_release:x3ware.Table.db_dir_)
  
  return db_dir__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_db_dir_(::std::string* db_dir_) {
  if (db_dir_ != NULL) {
    
  } else {
    
  }
  db_dir__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_dir_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.Table.db_dir_)
}

// -------------------------------------------------------------------

// Feature

// optional string uri_ = 1;
inline void Feature::clear_uri_() {
  uri__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::uri_() const {
  // @@protoc_insertion_point(field_get:x3ware.Feature.uri_)
  return uri__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_uri_(const ::std::string& value) {
  
  uri__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.Feature.uri_)
}
inline void Feature::set_uri_(const char* value) {
  
  uri__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.Feature.uri_)
}
inline void Feature::set_uri_(const char* value, size_t size) {
  
  uri__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.Feature.uri_)
}
inline ::std::string* Feature::mutable_uri_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.Feature.uri_)
  return uri__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_uri_() {
  // @@protoc_insertion_point(field_release:x3ware.Feature.uri_)
  
  return uri__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_uri_(::std::string* uri_) {
  if (uri_ != NULL) {
    
  } else {
    
  }
  uri__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.Feature.uri_)
}

// optional int32 attr_ = 2;
inline void Feature::clear_attr_() {
  attr__ = 0;
}
inline ::google::protobuf::int32 Feature::attr_() const {
  // @@protoc_insertion_point(field_get:x3ware.Feature.attr_)
  return attr__;
}
inline void Feature::set_attr_(::google::protobuf::int32 value) {
  
  attr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Feature.attr_)
}

// optional int32 size_ = 3;
inline void Feature::clear_size_() {
  size__ = 0;
}
inline ::google::protobuf::int32 Feature::size_() const {
  // @@protoc_insertion_point(field_get:x3ware.Feature.size_)
  return size__;
}
inline void Feature::set_size_(::google::protobuf::int32 value) {
  
  size__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Feature.size_)
}

// repeated float feature_f_ = 4;
inline int Feature::feature_f__size() const {
  return feature_f__.size();
}
inline void Feature::clear_feature_f_() {
  feature_f__.Clear();
}
inline float Feature::feature_f_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.Feature.feature_f_)
  return feature_f__.Get(index);
}
inline void Feature::set_feature_f_(int index, float value) {
  feature_f__.Set(index, value);
  // @@protoc_insertion_point(field_set:x3ware.Feature.feature_f_)
}
inline void Feature::add_feature_f_(float value) {
  feature_f__.Add(value);
  // @@protoc_insertion_point(field_add:x3ware.Feature.feature_f_)
}
inline const ::google::protobuf::RepeatedField< float >&
Feature::feature_f_() const {
  // @@protoc_insertion_point(field_list:x3ware.Feature.feature_f_)
  return feature_f__;
}
inline ::google::protobuf::RepeatedField< float >*
Feature::mutable_feature_f_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.Feature.feature_f_)
  return &feature_f__;
}

// repeated int32 feature_i_ = 5;
inline int Feature::feature_i__size() const {
  return feature_i__.size();
}
inline void Feature::clear_feature_i_() {
  feature_i__.Clear();
}
inline ::google::protobuf::int32 Feature::feature_i_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.Feature.feature_i_)
  return feature_i__.Get(index);
}
inline void Feature::set_feature_i_(int index, ::google::protobuf::int32 value) {
  feature_i__.Set(index, value);
  // @@protoc_insertion_point(field_set:x3ware.Feature.feature_i_)
}
inline void Feature::add_feature_i_(::google::protobuf::int32 value) {
  feature_i__.Add(value);
  // @@protoc_insertion_point(field_add:x3ware.Feature.feature_i_)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Feature::feature_i_() const {
  // @@protoc_insertion_point(field_list:x3ware.Feature.feature_i_)
  return feature_i__;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Feature::mutable_feature_i_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.Feature.feature_i_)
  return &feature_i__;
}

// -------------------------------------------------------------------

// Record

// optional string id_ = 1;
inline void Record::clear_id_() {
  id__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Record::id_() const {
  // @@protoc_insertion_point(field_get:x3ware.Record.id_)
  return id__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_id_(const ::std::string& value) {
  
  id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.Record.id_)
}
inline void Record::set_id_(const char* value) {
  
  id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.Record.id_)
}
inline void Record::set_id_(const char* value, size_t size) {
  
  id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.Record.id_)
}
inline ::std::string* Record::mutable_id_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.Record.id_)
  return id__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_id_() {
  // @@protoc_insertion_point(field_release:x3ware.Record.id_)
  
  return id__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_id_(::std::string* id_) {
  if (id_ != NULL) {
    
  } else {
    
  }
  id__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.Record.id_)
}

// optional int32 num_ = 2;
inline void Record::clear_num_() {
  num__ = 0;
}
inline ::google::protobuf::int32 Record::num_() const {
  // @@protoc_insertion_point(field_get:x3ware.Record.num_)
  return num__;
}
inline void Record::set_num_(::google::protobuf::int32 value) {
  
  num__ = value;
  // @@protoc_insertion_point(field_set:x3ware.Record.num_)
}

// repeated .x3ware.Feature features_ = 3;
inline int Record::features__size() const {
  return features__.size();
}
inline void Record::clear_features_() {
  features__.Clear();
}
inline const ::x3ware::Feature& Record::features_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.Record.features_)
  return features__.Get(index);
}
inline ::x3ware::Feature* Record::mutable_features_(int index) {
  // @@protoc_insertion_point(field_mutable:x3ware.Record.features_)
  return features__.Mutable(index);
}
inline ::x3ware::Feature* Record::add_features_() {
  // @@protoc_insertion_point(field_add:x3ware.Record.features_)
  return features__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::x3ware::Feature >*
Record::mutable_features_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.Record.features_)
  return &features__;
}
inline const ::google::protobuf::RepeatedPtrField< ::x3ware::Feature >&
Record::features_() const {
  // @@protoc_insertion_point(field_list:x3ware.Record.features_)
  return features__;
}

// -------------------------------------------------------------------

// ListRecord

// optional int32 seq_id_ = 1;
inline void ListRecord::clear_seq_id_() {
  seq_id__ = 0;
}
inline ::google::protobuf::int32 ListRecord::seq_id_() const {
  // @@protoc_insertion_point(field_get:x3ware.ListRecord.seq_id_)
  return seq_id__;
}
inline void ListRecord::set_seq_id_(::google::protobuf::int32 value) {
  
  seq_id__ = value;
  // @@protoc_insertion_point(field_set:x3ware.ListRecord.seq_id_)
}

// optional int32 seq_num_ = 2;
inline void ListRecord::clear_seq_num_() {
  seq_num__ = 0;
}
inline ::google::protobuf::int32 ListRecord::seq_num_() const {
  // @@protoc_insertion_point(field_get:x3ware.ListRecord.seq_num_)
  return seq_num__;
}
inline void ListRecord::set_seq_num_(::google::protobuf::int32 value) {
  
  seq_num__ = value;
  // @@protoc_insertion_point(field_set:x3ware.ListRecord.seq_num_)
}

// repeated .x3ware.Record record_ = 3;
inline int ListRecord::record__size() const {
  return record__.size();
}
inline void ListRecord::clear_record_() {
  record__.Clear();
}
inline const ::x3ware::Record& ListRecord::record_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.ListRecord.record_)
  return record__.Get(index);
}
inline ::x3ware::Record* ListRecord::mutable_record_(int index) {
  // @@protoc_insertion_point(field_mutable:x3ware.ListRecord.record_)
  return record__.Mutable(index);
}
inline ::x3ware::Record* ListRecord::add_record_() {
  // @@protoc_insertion_point(field_add:x3ware.ListRecord.record_)
  return record__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::x3ware::Record >*
ListRecord::mutable_record_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.ListRecord.record_)
  return &record__;
}
inline const ::google::protobuf::RepeatedPtrField< ::x3ware::Record >&
ListRecord::record_() const {
  // @@protoc_insertion_point(field_list:x3ware.ListRecord.record_)
  return record__;
}

// -------------------------------------------------------------------

// SearchParam

// optional int32 top_num_ = 1;
inline void SearchParam::clear_top_num_() {
  top_num__ = 0;
}
inline ::google::protobuf::int32 SearchParam::top_num_() const {
  // @@protoc_insertion_point(field_get:x3ware.SearchParam.top_num_)
  return top_num__;
}
inline void SearchParam::set_top_num_(::google::protobuf::int32 value) {
  
  top_num__ = value;
  // @@protoc_insertion_point(field_set:x3ware.SearchParam.top_num_)
}

// optional float distance_thr_ = 2;
inline void SearchParam::clear_distance_thr_() {
  distance_thr__ = 0;
}
inline float SearchParam::distance_thr_() const {
  // @@protoc_insertion_point(field_get:x3ware.SearchParam.distance_thr_)
  return distance_thr__;
}
inline void SearchParam::set_distance_thr_(float value) {
  
  distance_thr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.SearchParam.distance_thr_)
}

// optional float similar_thr_ = 3;
inline void SearchParam::clear_similar_thr_() {
  similar_thr__ = 0;
}
inline float SearchParam::similar_thr_() const {
  // @@protoc_insertion_point(field_get:x3ware.SearchParam.similar_thr_)
  return similar_thr__;
}
inline void SearchParam::set_similar_thr_(float value) {
  
  similar_thr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.SearchParam.similar_thr_)
}

// optional int32 num_ = 4;
inline void SearchParam::clear_num_() {
  num__ = 0;
}
inline ::google::protobuf::int32 SearchParam::num_() const {
  // @@protoc_insertion_point(field_get:x3ware.SearchParam.num_)
  return num__;
}
inline void SearchParam::set_num_(::google::protobuf::int32 value) {
  
  num__ = value;
  // @@protoc_insertion_point(field_set:x3ware.SearchParam.num_)
}

// repeated .x3ware.Feature features_ = 5;
inline int SearchParam::features__size() const {
  return features__.size();
}
inline void SearchParam::clear_features_() {
  features__.Clear();
}
inline const ::x3ware::Feature& SearchParam::features_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.SearchParam.features_)
  return features__.Get(index);
}
inline ::x3ware::Feature* SearchParam::mutable_features_(int index) {
  // @@protoc_insertion_point(field_mutable:x3ware.SearchParam.features_)
  return features__.Mutable(index);
}
inline ::x3ware::Feature* SearchParam::add_features_() {
  // @@protoc_insertion_point(field_add:x3ware.SearchParam.features_)
  return features__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::x3ware::Feature >*
SearchParam::mutable_features_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.SearchParam.features_)
  return &features__;
}
inline const ::google::protobuf::RepeatedPtrField< ::x3ware::Feature >&
SearchParam::features_() const {
  // @@protoc_insertion_point(field_list:x3ware.SearchParam.features_)
  return features__;
}

// -------------------------------------------------------------------

// MatchResult

// optional string id_ = 1;
inline void MatchResult::clear_id_() {
  id__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchResult::id_() const {
  // @@protoc_insertion_point(field_get:x3ware.MatchResult.id_)
  return id__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchResult::set_id_(const ::std::string& value) {
  
  id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.MatchResult.id_)
}
inline void MatchResult::set_id_(const char* value) {
  
  id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.MatchResult.id_)
}
inline void MatchResult::set_id_(const char* value, size_t size) {
  
  id__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.MatchResult.id_)
}
inline ::std::string* MatchResult::mutable_id_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.MatchResult.id_)
  return id__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchResult::release_id_() {
  // @@protoc_insertion_point(field_release:x3ware.MatchResult.id_)
  
  return id__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchResult::set_allocated_id_(::std::string* id_) {
  if (id_ != NULL) {
    
  } else {
    
  }
  id__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.MatchResult.id_)
}

// optional float distance_ = 2;
inline void MatchResult::clear_distance_() {
  distance__ = 0;
}
inline float MatchResult::distance_() const {
  // @@protoc_insertion_point(field_get:x3ware.MatchResult.distance_)
  return distance__;
}
inline void MatchResult::set_distance_(float value) {
  
  distance__ = value;
  // @@protoc_insertion_point(field_set:x3ware.MatchResult.distance_)
}

// optional float similar_ = 3;
inline void MatchResult::clear_similar_() {
  similar__ = 0;
}
inline float MatchResult::similar_() const {
  // @@protoc_insertion_point(field_get:x3ware.MatchResult.similar_)
  return similar__;
}
inline void MatchResult::set_similar_(float value) {
  
  similar__ = value;
  // @@protoc_insertion_point(field_set:x3ware.MatchResult.similar_)
}

// -------------------------------------------------------------------

// SearchResult

// optional bool match_ = 1;
inline void SearchResult::clear_match_() {
  match__ = false;
}
inline bool SearchResult::match_() const {
  // @@protoc_insertion_point(field_get:x3ware.SearchResult.match_)
  return match__;
}
inline void SearchResult::set_match_(bool value) {
  
  match__ = value;
  // @@protoc_insertion_point(field_set:x3ware.SearchResult.match_)
}

// optional int32 num_ = 2;
inline void SearchResult::clear_num_() {
  num__ = 0;
}
inline ::google::protobuf::int32 SearchResult::num_() const {
  // @@protoc_insertion_point(field_get:x3ware.SearchResult.num_)
  return num__;
}
inline void SearchResult::set_num_(::google::protobuf::int32 value) {
  
  num__ = value;
  // @@protoc_insertion_point(field_set:x3ware.SearchResult.num_)
}

// repeated .x3ware.MatchResult match_result_ = 3;
inline int SearchResult::match_result__size() const {
  return match_result__.size();
}
inline void SearchResult::clear_match_result_() {
  match_result__.Clear();
}
inline const ::x3ware::MatchResult& SearchResult::match_result_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.SearchResult.match_result_)
  return match_result__.Get(index);
}
inline ::x3ware::MatchResult* SearchResult::mutable_match_result_(int index) {
  // @@protoc_insertion_point(field_mutable:x3ware.SearchResult.match_result_)
  return match_result__.Mutable(index);
}
inline ::x3ware::MatchResult* SearchResult::add_match_result_() {
  // @@protoc_insertion_point(field_add:x3ware.SearchResult.match_result_)
  return match_result__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::x3ware::MatchResult >*
SearchResult::mutable_match_result_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.SearchResult.match_result_)
  return &match_result__;
}
inline const ::google::protobuf::RepeatedPtrField< ::x3ware::MatchResult >&
SearchResult::match_result_() const {
  // @@protoc_insertion_point(field_list:x3ware.SearchResult.match_result_)
  return match_result__;
}

// -------------------------------------------------------------------

// CompareParam

// optional float distance_thr_ = 1;
inline void CompareParam::clear_distance_thr_() {
  distance_thr__ = 0;
}
inline float CompareParam::distance_thr_() const {
  // @@protoc_insertion_point(field_get:x3ware.CompareParam.distance_thr_)
  return distance_thr__;
}
inline void CompareParam::set_distance_thr_(float value) {
  
  distance_thr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.CompareParam.distance_thr_)
}

// optional float similar_thr_ = 2;
inline void CompareParam::clear_similar_thr_() {
  similar_thr__ = 0;
}
inline float CompareParam::similar_thr_() const {
  // @@protoc_insertion_point(field_get:x3ware.CompareParam.similar_thr_)
  return similar_thr__;
}
inline void CompareParam::set_similar_thr_(float value) {
  
  similar_thr__ = value;
  // @@protoc_insertion_point(field_set:x3ware.CompareParam.similar_thr_)
}

// -------------------------------------------------------------------

// CompareResult

// optional bool match_ = 1;
inline void CompareResult::clear_match_() {
  match__ = false;
}
inline bool CompareResult::match_() const {
  // @@protoc_insertion_point(field_get:x3ware.CompareResult.match_)
  return match__;
}
inline void CompareResult::set_match_(bool value) {
  
  match__ = value;
  // @@protoc_insertion_point(field_set:x3ware.CompareResult.match_)
}

// optional float distance_ = 2;
inline void CompareResult::clear_distance_() {
  distance__ = 0;
}
inline float CompareResult::distance_() const {
  // @@protoc_insertion_point(field_get:x3ware.CompareResult.distance_)
  return distance__;
}
inline void CompareResult::set_distance_(float value) {
  
  distance__ = value;
  // @@protoc_insertion_point(field_set:x3ware.CompareResult.distance_)
}

// optional float similar_ = 3;
inline void CompareResult::clear_similar_() {
  similar__ = 0;
}
inline float CompareResult::similar_() const {
  // @@protoc_insertion_point(field_get:x3ware.CompareResult.similar_)
  return similar__;
}
inline void CompareResult::set_similar_(float value) {
  
  similar__ = value;
  // @@protoc_insertion_point(field_set:x3ware.CompareResult.similar_)
}

// -------------------------------------------------------------------

// ModelVerCheck

// optional string current_version_ = 1;
inline void ModelVerCheck::clear_current_version_() {
  current_version__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelVerCheck::current_version_() const {
  // @@protoc_insertion_point(field_get:x3ware.ModelVerCheck.current_version_)
  return current_version__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVerCheck::set_current_version_(const ::std::string& value) {
  
  current_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.ModelVerCheck.current_version_)
}
inline void ModelVerCheck::set_current_version_(const char* value) {
  
  current_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.ModelVerCheck.current_version_)
}
inline void ModelVerCheck::set_current_version_(const char* value, size_t size) {
  
  current_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.ModelVerCheck.current_version_)
}
inline ::std::string* ModelVerCheck::mutable_current_version_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.ModelVerCheck.current_version_)
  return current_version__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelVerCheck::release_current_version_() {
  // @@protoc_insertion_point(field_release:x3ware.ModelVerCheck.current_version_)
  
  return current_version__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVerCheck::set_allocated_current_version_(::std::string* current_version_) {
  if (current_version_ != NULL) {
    
  } else {
    
  }
  current_version__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_version_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.ModelVerCheck.current_version_)
}

// optional string last_version_ = 2;
inline void ModelVerCheck::clear_last_version_() {
  last_version__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelVerCheck::last_version_() const {
  // @@protoc_insertion_point(field_get:x3ware.ModelVerCheck.last_version_)
  return last_version__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVerCheck::set_last_version_(const ::std::string& value) {
  
  last_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:x3ware.ModelVerCheck.last_version_)
}
inline void ModelVerCheck::set_last_version_(const char* value) {
  
  last_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:x3ware.ModelVerCheck.last_version_)
}
inline void ModelVerCheck::set_last_version_(const char* value, size_t size) {
  
  last_version__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:x3ware.ModelVerCheck.last_version_)
}
inline ::std::string* ModelVerCheck::mutable_last_version_() {
  
  // @@protoc_insertion_point(field_mutable:x3ware.ModelVerCheck.last_version_)
  return last_version__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelVerCheck::release_last_version_() {
  // @@protoc_insertion_point(field_release:x3ware.ModelVerCheck.last_version_)
  
  return last_version__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelVerCheck::set_allocated_last_version_(::std::string* last_version_) {
  if (last_version_ != NULL) {
    
  } else {
    
  }
  last_version__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_version_);
  // @@protoc_insertion_point(field_set_allocated:x3ware.ModelVerCheck.last_version_)
}

// optional bool need_update_ = 3;
inline void ModelVerCheck::clear_need_update_() {
  need_update__ = false;
}
inline bool ModelVerCheck::need_update_() const {
  // @@protoc_insertion_point(field_get:x3ware.ModelVerCheck.need_update_)
  return need_update__;
}
inline void ModelVerCheck::set_need_update_(bool value) {
  
  need_update__ = value;
  // @@protoc_insertion_point(field_set:x3ware.ModelVerCheck.need_update_)
}

// -------------------------------------------------------------------

// WareMessage

// optional .x3ware.WareMessage.Type type_ = 1;
inline void WareMessage::clear_type_() {
  type__ = 0;
}
inline ::x3ware::WareMessage_Type WareMessage::type_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.type_)
  return static_cast< ::x3ware::WareMessage_Type >(type__);
}
inline void WareMessage::set_type_(::x3ware::WareMessage_Type value) {
  
  type__ = value;
  // @@protoc_insertion_point(field_set:x3ware.WareMessage.type_)
}

// optional .x3ware.WareMessage.Oper oper_ = 2;
inline void WareMessage::clear_oper_() {
  oper__ = 0;
}
inline ::x3ware::WareMessage_Oper WareMessage::oper_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.oper_)
  return static_cast< ::x3ware::WareMessage_Oper >(oper__);
}
inline void WareMessage::set_oper_(::x3ware::WareMessage_Oper value) {
  
  oper__ = value;
  // @@protoc_insertion_point(field_set:x3ware.WareMessage.oper_)
}

// optional .x3ware.WareMessage.Ack ack_ = 3;
inline void WareMessage::clear_ack_() {
  ack__ = 0;
}
inline ::x3ware::WareMessage_Ack WareMessage::ack_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.ack_)
  return static_cast< ::x3ware::WareMessage_Ack >(ack__);
}
inline void WareMessage::set_ack_(::x3ware::WareMessage_Ack value) {
  
  ack__ = value;
  // @@protoc_insertion_point(field_set:x3ware.WareMessage.ack_)
}

// optional int32 error_code_ = 4;
inline void WareMessage::clear_error_code_() {
  error_code__ = 0;
}
inline ::google::protobuf::int32 WareMessage::error_code_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.error_code_)
  return error_code__;
}
inline void WareMessage::set_error_code_(::google::protobuf::int32 value) {
  
  error_code__ = value;
  // @@protoc_insertion_point(field_set:x3ware.WareMessage.error_code_)
}

// optional .x3ware.ModuleInfo info_ = 5;
inline bool WareMessage::has_info_() const {
  return !_is_default_instance_ && info__ != NULL;
}
inline void WareMessage::clear_info_() {
  if (GetArenaNoVirtual() == NULL && info__ != NULL) delete info__;
  info__ = NULL;
}
inline const ::x3ware::ModuleInfo& WareMessage::info_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.info_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info__ != NULL ? *info__ : *default_instance().info__;
#else
  return info__ != NULL ? *info__ : *default_instance_->info__;
#endif
}
inline ::x3ware::ModuleInfo* WareMessage::mutable_info_() {
  
  if (info__ == NULL) {
    info__ = new ::x3ware::ModuleInfo;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.info_)
  return info__;
}
inline ::x3ware::ModuleInfo* WareMessage::release_info_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.info_)
  
  ::x3ware::ModuleInfo* temp = info__;
  info__ = NULL;
  return temp;
}
inline void WareMessage::set_allocated_info_(::x3ware::ModuleInfo* info_) {
  delete info__;
  info__ = info_;
  if (info_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.info_)
}

// repeated .x3ware.Table table_ = 6;
inline int WareMessage::table__size() const {
  return table__.size();
}
inline void WareMessage::clear_table_() {
  table__.Clear();
}
inline const ::x3ware::Table& WareMessage::table_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.table_)
  return table__.Get(index);
}
inline ::x3ware::Table* WareMessage::mutable_table_(int index) {
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.table_)
  return table__.Mutable(index);
}
inline ::x3ware::Table* WareMessage::add_table_() {
  // @@protoc_insertion_point(field_add:x3ware.WareMessage.table_)
  return table__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::x3ware::Table >*
WareMessage::mutable_table_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.WareMessage.table_)
  return &table__;
}
inline const ::google::protobuf::RepeatedPtrField< ::x3ware::Table >&
WareMessage::table_() const {
  // @@protoc_insertion_point(field_list:x3ware.WareMessage.table_)
  return table__;
}

// repeated .x3ware.Record record_ = 7;
inline int WareMessage::record__size() const {
  return record__.size();
}
inline void WareMessage::clear_record_() {
  record__.Clear();
}
inline const ::x3ware::Record& WareMessage::record_(int index) const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.record_)
  return record__.Get(index);
}
inline ::x3ware::Record* WareMessage::mutable_record_(int index) {
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.record_)
  return record__.Mutable(index);
}
inline ::x3ware::Record* WareMessage::add_record_() {
  // @@protoc_insertion_point(field_add:x3ware.WareMessage.record_)
  return record__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::x3ware::Record >*
WareMessage::mutable_record_() {
  // @@protoc_insertion_point(field_mutable_list:x3ware.WareMessage.record_)
  return &record__;
}
inline const ::google::protobuf::RepeatedPtrField< ::x3ware::Record >&
WareMessage::record_() const {
  // @@protoc_insertion_point(field_list:x3ware.WareMessage.record_)
  return record__;
}

// optional .x3ware.SearchParam search_param_ = 8;
inline bool WareMessage::has_search_param_() const {
  return !_is_default_instance_ && search_param__ != NULL;
}
inline void WareMessage::clear_search_param_() {
  if (GetArenaNoVirtual() == NULL && search_param__ != NULL) delete search_param__;
  search_param__ = NULL;
}
inline const ::x3ware::SearchParam& WareMessage::search_param_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.search_param_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return search_param__ != NULL ? *search_param__ : *default_instance().search_param__;
#else
  return search_param__ != NULL ? *search_param__ : *default_instance_->search_param__;
#endif
}
inline ::x3ware::SearchParam* WareMessage::mutable_search_param_() {
  
  if (search_param__ == NULL) {
    search_param__ = new ::x3ware::SearchParam;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.search_param_)
  return search_param__;
}
inline ::x3ware::SearchParam* WareMessage::release_search_param_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.search_param_)
  
  ::x3ware::SearchParam* temp = search_param__;
  search_param__ = NULL;
  return temp;
}
inline void WareMessage::set_allocated_search_param_(::x3ware::SearchParam* search_param_) {
  delete search_param__;
  search_param__ = search_param_;
  if (search_param_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.search_param_)
}

// optional .x3ware.SearchResult search_result_ = 9;
inline bool WareMessage::has_search_result_() const {
  return !_is_default_instance_ && search_result__ != NULL;
}
inline void WareMessage::clear_search_result_() {
  if (GetArenaNoVirtual() == NULL && search_result__ != NULL) delete search_result__;
  search_result__ = NULL;
}
inline const ::x3ware::SearchResult& WareMessage::search_result_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.search_result_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return search_result__ != NULL ? *search_result__ : *default_instance().search_result__;
#else
  return search_result__ != NULL ? *search_result__ : *default_instance_->search_result__;
#endif
}
inline ::x3ware::SearchResult* WareMessage::mutable_search_result_() {
  
  if (search_result__ == NULL) {
    search_result__ = new ::x3ware::SearchResult;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.search_result_)
  return search_result__;
}
inline ::x3ware::SearchResult* WareMessage::release_search_result_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.search_result_)
  
  ::x3ware::SearchResult* temp = search_result__;
  search_result__ = NULL;
  return temp;
}
inline void WareMessage::set_allocated_search_result_(::x3ware::SearchResult* search_result_) {
  delete search_result__;
  search_result__ = search_result_;
  if (search_result_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.search_result_)
}

// optional .x3ware.CompareParam compare_param_ = 10;
inline bool WareMessage::has_compare_param_() const {
  return !_is_default_instance_ && compare_param__ != NULL;
}
inline void WareMessage::clear_compare_param_() {
  if (GetArenaNoVirtual() == NULL && compare_param__ != NULL) delete compare_param__;
  compare_param__ = NULL;
}
inline const ::x3ware::CompareParam& WareMessage::compare_param_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.compare_param_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return compare_param__ != NULL ? *compare_param__ : *default_instance().compare_param__;
#else
  return compare_param__ != NULL ? *compare_param__ : *default_instance_->compare_param__;
#endif
}
inline ::x3ware::CompareParam* WareMessage::mutable_compare_param_() {
  
  if (compare_param__ == NULL) {
    compare_param__ = new ::x3ware::CompareParam;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.compare_param_)
  return compare_param__;
}
inline ::x3ware::CompareParam* WareMessage::release_compare_param_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.compare_param_)
  
  ::x3ware::CompareParam* temp = compare_param__;
  compare_param__ = NULL;
  return temp;
}
inline void WareMessage::set_allocated_compare_param_(::x3ware::CompareParam* compare_param_) {
  delete compare_param__;
  compare_param__ = compare_param_;
  if (compare_param_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.compare_param_)
}

// optional .x3ware.CompareResult compare_result_ = 11;
inline bool WareMessage::has_compare_result_() const {
  return !_is_default_instance_ && compare_result__ != NULL;
}
inline void WareMessage::clear_compare_result_() {
  if (GetArenaNoVirtual() == NULL && compare_result__ != NULL) delete compare_result__;
  compare_result__ = NULL;
}
inline const ::x3ware::CompareResult& WareMessage::compare_result_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.compare_result_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return compare_result__ != NULL ? *compare_result__ : *default_instance().compare_result__;
#else
  return compare_result__ != NULL ? *compare_result__ : *default_instance_->compare_result__;
#endif
}
inline ::x3ware::CompareResult* WareMessage::mutable_compare_result_() {
  
  if (compare_result__ == NULL) {
    compare_result__ = new ::x3ware::CompareResult;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.compare_result_)
  return compare_result__;
}
inline ::x3ware::CompareResult* WareMessage::release_compare_result_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.compare_result_)
  
  ::x3ware::CompareResult* temp = compare_result__;
  compare_result__ = NULL;
  return temp;
}
inline void WareMessage::set_allocated_compare_result_(::x3ware::CompareResult* compare_result_) {
  delete compare_result__;
  compare_result__ = compare_result_;
  if (compare_result_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.compare_result_)
}

// optional .x3ware.ModelVerCheck model_version_check_ = 12;
inline bool WareMessage::has_model_version_check_() const {
  return !_is_default_instance_ && model_version_check__ != NULL;
}
inline void WareMessage::clear_model_version_check_() {
  if (GetArenaNoVirtual() == NULL && model_version_check__ != NULL) delete model_version_check__;
  model_version_check__ = NULL;
}
inline const ::x3ware::ModelVerCheck& WareMessage::model_version_check_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.model_version_check_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return model_version_check__ != NULL ? *model_version_check__ : *default_instance().model_version_check__;
#else
  return model_version_check__ != NULL ? *model_version_check__ : *default_instance_->model_version_check__;
#endif
}
inline ::x3ware::ModelVerCheck* WareMessage::mutable_model_version_check_() {
  
  if (model_version_check__ == NULL) {
    model_version_check__ = new ::x3ware::ModelVerCheck;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.model_version_check_)
  return model_version_check__;
}
inline ::x3ware::ModelVerCheck* WareMessage::release_model_version_check_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.model_version_check_)
  
  ::x3ware::ModelVerCheck* temp = model_version_check__;
  model_version_check__ = NULL;
  return temp;
}
inline void WareMessage::set_allocated_model_version_check_(::x3ware::ModelVerCheck* model_version_check_) {
  delete model_version_check__;
  model_version_check__ = model_version_check_;
  if (model_version_check_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.model_version_check_)
}

// optional .x3ware.ListRecord list_record_ = 13;
inline bool WareMessage::has_list_record_() const {
  return !_is_default_instance_ && list_record__ != NULL;
}
inline void WareMessage::clear_list_record_() {
  if (GetArenaNoVirtual() == NULL && list_record__ != NULL) delete list_record__;
  list_record__ = NULL;
}
inline const ::x3ware::ListRecord& WareMessage::list_record_() const {
  // @@protoc_insertion_point(field_get:x3ware.WareMessage.list_record_)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return list_record__ != NULL ? *list_record__ : *default_instance().list_record__;
#else
  return list_record__ != NULL ? *list_record__ : *default_instance_->list_record__;
#endif
}
inline ::x3ware::ListRecord* WareMessage::mutable_list_record_() {
  
  if (list_record__ == NULL) {
    list_record__ = new ::x3ware::ListRecord;
  }
  // @@protoc_insertion_point(field_mutable:x3ware.WareMessage.list_record_)
  return list_record__;
}
inline ::x3ware::ListRecord* WareMessage::release_list_record_() {
  // @@protoc_insertion_point(field_release:x3ware.WareMessage.list_record_)
  
  ::x3ware::ListRecord* temp = list_record__;
  list_record__ = NULL;
  return temp;
}
inline void WareMessage::set_allocated_list_record_(::x3ware::ListRecord* list_record_) {
  delete list_record__;
  list_record__ = list_record_;
  if (list_record_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:x3ware.WareMessage.list_record_)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace x3ware

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::x3ware::ModuleInfo_StoreType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::x3ware::WareMessage_Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::x3ware::WareMessage_Oper> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::x3ware::WareMessage_Ack> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_x3ware_2eproto__INCLUDED
