/*!
 * -------------------------------------------
 * Copyright (c) 2019, Horizon Robotics, Inc.
 * All rights reserved.
 * \File     msg_registry.h
 * \Author Songshan Gong
 * \Mail     songshan.gong@horizon.ai
 * \Version  1.0.0.0
 * \Date     2019-07-30
 * \Brief    xplugin message registry
 * \DO NOT MODIFY THIS COMMENT, \
 * \WHICH IS AUTO GENERATED BY EDITOR
 * -------------------------------------------
 */

#ifndef XPROTO_INCLUDE_XPROTO_MESSAGE_MSG_REGISTRY_H_
#define XPROTO_INCLUDE_XPROTO_MESSAGE_MSG_REGISTRY_H_

#include <map>
#include <mutex>
#include <string>

#include "xproto/version.h"

namespace xproto {
typedef int32_t XPluginMsgTypeHandle;
#define XPLUGIN_INVALID_MSG_TYPE -1
class XPROTO_EXPORT XPluginMsgRegistry {
 public:
  XPluginMsgTypeHandle Register(const std::string &name);

  XPluginMsgTypeHandle Get(const std::string &name);

  static XPluginMsgRegistry &Instance();

 private:
  std::mutex mutex_;
  std::map<std::string, XPluginMsgTypeHandle> fmap_;
  int32_t counter_{0};

  XPluginMsgRegistry();
  ~XPluginMsgRegistry();
};

/**
 * @description: xproto message type registration interface.In addition to
 * implementing a unified interface, xproto messages also need to register their
 * message types with xproto. Each type of message has a message type and
 * structure in the form of a string. This interface is a macro. The parameter
 * "key" is used to indicate the declared message type. It needs to be written
 * directly in the format of the identifier, and the macro will convert it into
 * a string internally. Note: You need to call this interface to declare the
 * message type before the consumer Plugin calls the subscription message
 * interface. Generally, this macro is placed in the position of the global
 * variable declaration.
 * @param {*}  key: message type
 * @return {*}
 */
#define XPLUGIN_REGISTER_MSG_TYPE(key)                                      \
  static xproto::XPluginMsgTypeHandle __make__##key##__xplugin_msg_type__ = \
      xproto::XPluginMsgRegistry::Instance().Register(#key);

}  // namespace xproto

#endif  // XPROTO_INCLUDE_XPROTO_MESSAGE_MSG_REGISTRY_H_
