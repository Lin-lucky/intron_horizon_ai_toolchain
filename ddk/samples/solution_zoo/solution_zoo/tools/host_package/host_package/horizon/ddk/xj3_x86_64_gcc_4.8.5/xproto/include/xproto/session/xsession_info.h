/*!
 * -------------------------------------------
 * Copyright (c) 2019, Horizon Robotics, Inc.
 * All rights reserved.
 * \File     msg_manager.h
 * \Author   Yingmin Li
 * \Mail     yingmin.li@horizon.ai
 * \Version  1.0.0.0
 * \Date     2019-04-22
 * \Brief    implement of msg_manager.h
 * \DO NOT MODIFY THIS COMMENT, \
 * \WHICH IS AUTO GENERATED BY EDITOR
 * -------------------------------------------
 */

#ifndef XPROTO_SRC_INCLUDE_XPROTO_MSG_SESSION_H_
#define XPROTO_SRC_INCLUDE_XPROTO_MSG_SESSION_H_
#include <algorithm>
#include <iostream>
#include <map>
#include <memory>
#include <mutex>
#include <string>
#include <vector>

#include "xproto/version.h"

namespace xproto {
/**
 * Sesstion_type
 * @TYPE_LOCAL: 本地模式
 * @TYPE_MASTER: master节点
 * @TYPE_SLAVE: slave节点
 */
enum XPROTO_EXPORT SesstionType {
  TYPE_LOCAL = 0, TYPE_MASTER = 1, TYPE_SLAVE = 2 };
/**
 * Sesstion_State, 结合SessionType, 每一种SesstionType对应两种状态
 * @STATE_ONLINE: 当前节点处于联网状态
 * @STATE_OFFLINE: 当前节点处于断网状态
 */
enum XPROTO_EXPORT SesstionState { STATE_ONLINE = 0, STATE_OFFLINE = 1 };
/**
 * Session_Info
 * @id_: Session ID
 * @type_: Session 类型
 * @version_: Session 版本
 * @state_: Session运行状态
 * @msg_type_list_: 当前Session节点流转的消息组合, map的key是消息类型,
 * value是订阅消息的plugin名字列表
 */
struct XPROTO_EXPORT SessionInfo {
  int32_t id_;
  SesstionType type_;
  std::string version_;
  SesstionState state_;
  std::map<std::string, std::vector<std::string>> msg_type_list_;
};

/* Session本身占用5个消息类型, 后续客户自定义的消息类型不能与如下5个类型重合 */
const char g_session_register_msg_subject[] =
    "xproto_session_register_msg_type";
const char g_session_unregister_msg_subject[] =
    "xproto_session_unregister_msg_type";
const char g_killself_subject[] = "xproto_session_socket_killself";
const char g_first_request_subject[] = "xproto_first_request_subject";
const char g_heart_update_subject[] = "xproto_first_request_subject";
}  // namespace xproto

#endif  // XPROTO_SRC_INCLUDE_XPROTO_MSG_SESSION_H_
