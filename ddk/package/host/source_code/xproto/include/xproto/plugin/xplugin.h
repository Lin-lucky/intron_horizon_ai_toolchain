/*!
 * -------------------------------------------
 * Copyright (c) 2019, Horizon Robotics, Inc.
 * All rights reserved.
 * \File     plugin.h
 * \Author   Yingmin Li
 * \Mail     yingmin.li@horizon.ai
 * \Contributor Songshan Gong
 * \Mail     songshan.gong@horizon.ai
 * \Version  1.0.0.0
 * \Date     2019-04-22
 * \Brief    async implementatiion of xplugin.h
 * \DO NOT MODIFY THIS COMMENT, \
 * \WHICH IS AUTO GENERATED BY EDITOR
 * -------------------------------------------
 */

#ifndef XPROTO_INCLUDE_XPROTO_PLUGIN_XPLUGIN_H_
#define XPROTO_INCLUDE_XPROTO_PLUGIN_XPLUGIN_H_
#include <memory>
#include <string>

#include "xproto/version.h"
#include "xproto/message/flowmsg.h"

namespace xproto {
class XPROTO_EXPORT XPlugin : public std::enable_shared_from_this<XPlugin> {
 public:
  XPlugin() = default;
  virtual ~XPlugin() = default;

  /**
   * @description: Initialize Plugin. This interface needs a custom Plugin
   * inherited from the XPlugin class to implement the interface definition.
   * This interface is used to initialize the Plugin. Custom Plugin generally
   * subscribe to message in this interface.
   * @param {*} None
   * @return {*} zero:success non-zero:failure
   */
  virtual int Init() = 0;

  /**
   * @description: De-initialize Plugin.This interface needs to be inherited
   * from the custom Plugin of the XPlugin class to implement the interface
   * definition. This interface is used to de-initialize the Plugin.
   * @param {*} None
   * @return {*}zero:success non-zero:failure
   */
  virtual int DeInit() { return 0; }

  /**
   * @description: Processing xproto messages: This interface needs to be
   * inherited from the custom Plugin of the XPlugin class to implement the
   * interface definition. This interface receives and processes bus messages,
   * and the interface cannot be blocked for too long.
   * @param {XProtoMessagePtr} the message pushed to the xproto bus
   * @return {*} None
   */
  virtual void OnMsg(XProtoMessagePtr msg) = 0;

  /**
   * @description: Plugin description information. This interface needs a custom
   * Plugin inherited from the XPlugin class to implement the interface
   * definition.
   * @param {*} None
   * @return {*} A string describing the current custom Plugin.
   */
  virtual std::string desc() const { return "XPlugin"; }

 protected:
  /**
   * @description: Subscribe to the message: subscribe to the specified type of
   * message. Monitor the bus, and call the callback function when the specified
   * message type is published.
   * @param {const std::string&} type[in]: message type string.
   * @param {msg_source} 0: recv msg from self-process and network both, 1:recv
   * msg from self-process
   * @return {*} None
   */
  void RegisterMsg(const std::string& type, int32_t msg_source = 0);

  /**
   * @description: Cancel message subscription. Cancel the subscription of the
   * specified type of message. After unsubscribing, the plugin will no longer
   * receive this type of message.
   * @param {const std::string&} type: message type string
   * @return {*} None
   */
  void UnRegisterMsg(const std::string& type);

  /**
   * @description: Publish messages. This interface is used to publish messages
   * to the XProto internal bus. If the message is congested, the message will
   * be published after waiting for the channel to clear. Receive a structure
   * pointer of type XProtoMessage, all XProto messages inherit from this type.
   * @param {XProtoMessagePtr} the message pushed to the xproto bus
   * @param {int32_t} 0: push msg to self-process and network both, 1: push msg
   * to self-process only.
   * @return {*} None
   */
  void PushMsg(XProtoMessagePtr msg, int32_t msg_dst = 0);

  /**
   * @description: Publish message. This interface attempts to publish the
   * message to the XProto internal bus. If the message is congested, the
   * message will be discarded and returned immediately. Receive a structure
   * pointer of type XProtoMessage, all XProto messages inherit from this type.
   * @param {XProtoMessagePtr} the message pushed to the xproto bus
   * @param {int32_t} 0: push msg to self-process and network both, 1: push msg
   * to self-process only.
   * @return {*}
   */
  int TryPushMsg(XProtoMessagePtr msg, int32_t msg_dst = 0);
};
using XPluginPtr = std::shared_ptr<XPlugin>;

}  // namespace xproto

#endif  // XPROTO_INCLUDE_XPROTO_PLUGIN_XPLUGIN_H_
