
def exec_get_ph() {
    if (env.DIFF_ID && env.PHID) {
        sh '''
            git reset --hard origin/$BRANCH_NAME
            git clean -fd -f
            git config --global user.name jingyi.wang
            git config --global user.email jingyi.wang@horizon.ai
            arc patch --diff $DIFF_ID --nobranch --force --nocommit --conduit-uri=https://cr.hobot.cc/ --conduit-token=api-ojyrmpxgp4zwelvzgikelwywjz7x
        '''
    }
}

def exec_lint() {
    if (env.DIFF_ID && env.PHID) {
        sh '''
            /bin/cp scm/arclint .arclint
            arc lint --output json --only-changed --rev $GIT_COMMIT --outfile lint_result.json
            cd scm
            python3 phformatter.py -c ../lint_result.json
            mv phabricator.json ../.
            cd ..
            zip lint_result.zip phabricator.json
        '''
        stash includes: 'lint_result.zip', name: 'lint_result'
        sh 'python3 scm/check_test.py $REVISION_ID'
    }
}

def exec_build(build_param) {
    unstash 'source_code'
    sh 'tar zxvf source_code.tgz'
    sh """#!/bin/bash -ex
        cp build.properties.local.$STAGE_NAME build.properties.local
        bash -ex ./cicd/scripts/build_linux.sh cpu $build_param
    """
    if ("${env.STAGE_NAME}" == "x86") {
        sh """#!/bin/bash -ex
            bash -ex cicd/scripts/copy_runtime.sh
            cd release/xstream-framework
            bash -ex ./test_linux.sh
        """
    }
    if (build_param == "release") {
        dir('build') {
            sh 'make install'
            sh 'make upload'
        }
    }
}

def create_ut(rel_param) {
    sh """#!/bin/bash -ex
        bash -ex cicd/scripts/copy_runtime.sh
    """
    if (rel_param == "release") {
        stash includes: 'release/**', name: 'ut-release'
    }
    else {
        stash includes: 'release/**', name: 'ut-debug'
    }
}

def exec_ut() {
    dir('release') {
        sh 'cd xstream-framework; sh -ex test_linux.sh'
    }
}

def parse_ut() {
    dir('release') {
        sh 'cat gtestresults.xml'
        sh '''
            awk '{ if ($1 == "<testcase" && match($0, "notrun")) print substr($0,0,length($0)-2) "><skipped/></testcase>"; else print $0;}' gtestresults.xml > gtestresults-skipped.xml
        '''
        sh 'cat gtestresults-skipped.xml'
    }
}

pipeline {
    agent {
        kubernetes {
            label "${UUID.randomUUID().toString()}"
            yamlFile 'scm/cicd_common_tool.yaml'
        }
    }
    parameters {
        string defaultValue: '', description: 'Enter PH DIFF_ID', name: 'DIFF_ID', trim: true
        string defaultValue: '', description: 'Enter PH PHID', name: 'PHID', trim: true
        string defaultValue: '', description: 'Enter PH REVISION ID', name: 'REVISION_ID', trim: true
    }
    stages{
        stage('prepare') {
            /*when { 
                branch 'master'
                beforeAgent true
            }*/
            agent {
                kubernetes {
                    label "${UUID.randomUUID().toString()}"
                    yamlFile 'scm/cicd_common_tool.yaml' 
                }
            }
            environment {
                LANG = 'en_US.UTF-8'
            }
            steps {
                container('build') {
                    script {
                        if (!env.DIFF_ID && !env.PHID) {
                            updateGitlabCommitStatus name: "${env.BUILD_TAG}", state: 'running'
                        }
                    }    
                    exec_get_ph()
                    exec_lint()
                    sh '''
                        tar zcf ../source_code.tgz .
                        mv ../source_code.tgz .
                    '''
                    stash includes: 'source_code.tgz', name: 'source_code'
                }
            }
        }
        stage('building-debug') {
            parallel {
                stage('x86') {
                    agent {
                        kubernetes {
                            label "${UUID.randomUUID().toString()}"
                            yamlFile "scm/project/${env.STAGE_NAME}.yaml"
                        }
                    }
                    environment {
                        GRADLE_USER_HOME = "${env.WORKSPACE}/.gradle"
                    }
                    options { 
                        skipDefaultCheckout() 
                    }
                    steps {
                        container('build') {
                            exec_build('debug') 
                        }
                    }
                }
                stage('aarch64') {
                    agent {
                        kubernetes {
                            label "${UUID.randomUUID().toString()}"
                            yamlFile "scm/project/${env.STAGE_NAME}.yaml"
                        }
                    }
                    environment {
                        GRADLE_USER_HOME = "${env.WORKSPACE}/.gradle"
                    }
                    options { 
                        skipDefaultCheckout() 
                    }
                    steps {
                        container('build') {
                            exec_build('debug') 
                            create_ut("debug")
                        }
                    }
                }
            }
        }
        stage('building-release') {
            when {
                buildingTag()
                beforeAgent true
            }
            parallel {
                stage('x86') {
                    agent {
                        kubernetes {
                            label "${UUID.randomUUID().toString()}"
                            yamlFile "scm/project/${env.STAGE_NAME}.yaml"
                        }
                    }
                    environment {
                        GRADLE_USER_HOME = "${env.WORKSPACE}/.gradle"
                    }
                    options { 
                        skipDefaultCheckout() 
                    }
                    steps {
                        container('build') {
                            exec_build('release') 
                        }
                    }
                }
                stage('aarch64') {
                    agent {
                        kubernetes {
                            label "${UUID.randomUUID().toString()}"
                            yamlFile "scm/project/${env.STAGE_NAME}.yaml"
                        }
                    }
                    environment {
                        GRADLE_USER_HOME = "${env.WORKSPACE}/.gradle"
                    }
                    options { 
                        skipDefaultCheckout() 
                    }
                    steps {
                        container('build') {
                            exec_build('release')
                            create_ut('release') 
                        }
                    }
                }
            }
        }
        stage('unit test') {
            parallel {
                stage('debug') {
                    options { 
                        skipDefaultCheckout() 
                    }
                    agent {
                        label 'x2600_ut'
                    }
                    steps {
                        deleteDir()
                        unstash 'ut-debug'
                        exec_ut()
                    }
                    /*
                    post {
                        always {
                            script {
                                try {
                                    parse_ut()
                                    junit 'release/gtestresults-skipped.xml'
                                }
                                catch (Exception e) {
                                    sh 'failed upload ut to jenkins'
                                }
                            }
                        }
                    }
                    */
                }
                stage('release') {
                    when {
                        buildingTag()
                        beforeAgent true
                    }
                    options {
                        skipDefaultCheckout()
                    }
                    agent {
                        label 'x2600_ut'
                    }
                    steps {
                        deleteDir()
                        unstash 'ut-release'
                        exec_ut()
                    }
                    /*
                    post {
                        always {
                            script {
                                try {
                                    parse_ut()
                                    junit 'release/gtestresults-skipped.xml'
                                }
                                catch (Exception e) {
                                    sh 'failed upload ut to jenkins'
                                }
                            }
                        }
                    }
                    */
                }
            }
        }
    }
    options {
      gitLabConnection('Gitlab connector by hobot.ci')
    }
    post {
        failure {
            script {
                if (!env.DIFF_ID && !env.PHID) {
                    updateGitlabCommitStatus name: "${env.BUILD_TAG}", state: 'failed'
                }
            }
        }
        success {
            script {
                if (!env.DIFF_ID && !env.PHID) {
                    updateGitlabCommitStatus name: "${env.BUILD_TAG}", state: 'success'
                }
            }
        }
        unstable {
            script {
                if (!env.DIFF_ID && !env.PHID) {
                    updateGitlabCommitStatus name: "${env.BUILD_TAG}", state: 'success'
                }
            }
        }
        aborted {
            script {
                if (!env.DIFF_ID && !env.PHID) {
                    updateGitlabCommitStatus name: "${env.BUILD_TAG}", state: 'canceled'
                }
            }
        }
        always {
            script {
                if (env.DIFF_ID && env.PHID) {
                    try {
                        unstash 'lint_result'
                        sh 'unzip lint_result.zip'
                        step([$class: 'PhabricatorNotifier', commentOnSuccess: true, commentWithConsoleLinkOnFailure: true, processLint: true, lintFile: 'phabricator.json', lintFileSize: '999999999'])
                    }
                    catch (Exception e) {
                        step([$class: 'PhabricatorNotifier', commentOnSuccess: true, commentWithConsoleLinkOnFailure: true])
                    }
                }
            }
            emailext (
                attachLog: true,
                subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.currentResult} !",
                body: """
                Check the info below to get more information
                
                Job Link: ${env.BUILD_URL}
                Branch/Tag Name: ${env.BRANCH_NAME}
                Job Name: ${env.JOB_NAME}
                Build Number: ${env.BUILD_NUMBER}
                Result: ${currentBuild.currentResult}
                """,
                to: "jingyi.wang@horizon.ai",
                from: "hobot.ci@horizon.ai"
            )
        }
    }
}
